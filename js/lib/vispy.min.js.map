{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/data.js","scripts/events.js","scripts/gloo.glir.js","scripts/gloo.js","scripts/lib/jquery.mousewheel.min.js","scripts/lib/screenfull.min.js","scripts/util.js","scripts/vispy.js","scripts/vispycanvas.js"],"names":["f","exports","module","define","amd","window","global","self","this","vispy","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_typed_array_map","float32","Float32Array","int8","Int8Array","int16","Int16Array","int32","Int32Array","uint8","Uint8Array","uint16","Uint16Array","uint32","Uint32Array","to_array_buffer","data","storage_type","undefined","data_type","contents","buffer","base64","binary_string","atob","len","bytes","ascii","charCodeAt","decode_base64","VispyCanvas","screenfull","get_modifiers","modifiers","altKey","push","ctrlKey","metaKey","shiftKey","$","_key_map","8","9","13","16","17","18","27","32","33","34","35","36","37","38","39","40","45","46","91","92","96","97","98","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","186","187","188","189","190","191","192","219","220","221","222","get_key_code","keynum","event","keyCode","which","key_code","String","fromCharCode","toUpperCase","trim","_button_map","0","2","gen_mouse_event","type","button","_eventinfo","is_button_pressed","rect","pos","$el","get","getBoundingClientRect","clientX","left","clientY","top","press_event","last_event","is_dragging","delta","gen_key_event","EventQueue","maxlen","_queue","prototype","_mouse_press","_mouse_release","_mouse_move","_mouse_wheel","_mouse_click","_mouse_dblclick","_key_press","_key_release","_initialize","_resize","_paint","_event_tick","on_mouse_press","on_mouse_release","on_mouse_move","on_mouse_wheel","on_mouse_dblclick","on_key_press","on_key_release","on_initialize","on_resize","on_paint","on_event_tick","initialize","_set_size","size","width","height","paint","event_queue","append","update","resize","gl","canvas","event_tick","execute_pending_commands","is_fullscreen","toggle_fullscreen","enabled","isFullscreen","exit","_size","request","screen","deactivate_context_menu","document","oncontextmenu","resizable","that","ui","clear","compress","e1","e2","add_to_queue","props","equals","prop","shift","Object","defineProperty","events","init","key","mousemove","mousedown","mouseup","click","dblclick","mousewheel","deltaX","deltaFactor","deltaY","preventDefault","stopPropagation","keydown","keyup","mouseout","util","debug","JUST_DELETED","activate_attribute","attribute_handle","vbo_id","stride","offset","_attribute_info","_attribute_type_map","attribute_type","ndim","_vbo_info","_ns","vbo_handle","handle","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","set_texture_data","object_handle","gl_type","format","array","shape","dtype","bindTexture","pixelStorei","UNPACK_ALIGNMENT","texImage2D","UNSIGNED_BYTE","getContext","RGBA","array_view","FLOAT","alignment","alignments","_get_alignment","texSubImage2D","set_buffer_data","reuse","bufferSubData","bufferData","STATIC_DRAW","_dtype_to_gl_dtype","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","_uniform_type_map","mat2","mat3","mat4","_gl_type_map","VertexBuffer","IndexBuffer","Texture2D","get_gl_type","object_type","_gl_attachment_map","color","depth","stencil","parse_enum","str","strs","split","value","name","activate_framebuffer","framebuffer_id","fb","stack","env","fb_stack","bindFramebuffer","FRAMEBUFFER","deactivate_framebuffer","pop","init_env_cache","GlirQueue","append_multi","es","set_deferred","deferred","_deferred","q","glir_queue","execute_up_to","command","slice","method","toLowerCase","glir","current","args","swap","create","id","cls","createBuffer","createFramebuffer","validated","createRenderbuffer","createTexture","createProgram","attributes","uniforms","textures","texture_uniforms","createShader","VERTEX_SHADER","FRAGMENT_SHADER","delete","deleteBuffer","deleteFramebuffer","deleteRenderbuffer","deleteTexture","deleteProgram","indexOf","deleteShader","type_str","object_id","object","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","shader","source","console","log","apply","replace","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","gl_dtype","byteLength","attribute","program_id","program_handle","program","getAttribLocation","uniform","uniform_handle","uniform_function","uniform_info","useProgram","getUniformLocation","texture","sampler_name","texture_id","texture_handle","hasOwnProperty","sampler_handle","number","interpolation","min","mag","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","wrapping","TEXTURE_WRAP_S","TEXTURE_WRAP_T","draw","attribute_name","texture_index","count","mode","selection","texture_number","activeTexture","TEXTURE0","uniform1i","start","drawArrays","index_buffer_id","index_buffer_type","index_buffer_handle","ELEMENT_ARRAY_BUFFER","drawElements","disableVertexAttribArray","new_textures","attach","dst_id","dst_obj","dst_type","dst_handle","attach_type","framebufferRenderbuffer","framebufferTexture2D","shader_id","shader_handle","attachShader","link","linkProgram","getProgramParameter","LINK_STATUS","warn","framebuffer","bind","status","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","validate_framebuffer","func","func_args","gloo","ext","getExtension","init_webgl","b","g","h","arguments","j","l","m","fix","detail","wheelDelta","wheelDeltaY","wheelDeltaX","axis","HORIZONTAL_AXIS","deltaMode","Math","max","abs","d","k","settings","normalizeOffset","s","offsetX","offsetY","unshift","clearTimeout","setTimeout","dispatch","adjustOldDeltas","documentMode","Array","fixHooks","mouseHooks","special","version","setup","addEventListener","onmousewheel","getLineHeight","getPageHeight","teardown","removeEventListener","removeData","fn","parseInt","css","extend","trigger","unmousewheel","unbind","jQuery","Element","requestFullscreen","documentElement","test","navigator","userAgent","ALLOW_KEYBOARD_INPUT","exitFullscreen","toggle","onchange","onerror","raw","defineProperties","fullscreenElement","element","enumerable","fullscreenEnabled","fullscreenchange","fullscreenerror","match","startsWith","VISPY_DEBUG","msg","Vispy","_is_loop_running","_canvases","canvas_id","canvas_el","register","unregister","index","splice","start_event_loop","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","animloop","_request_id","err","stop_event_loop","cancelAnimationFrame"],"mappings":"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","file":"vispy.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function decode_base64(base64) {\n    var binary_string =  window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i < len; i++)        {\n        var ascii = binary_string.charCodeAt(i);\n        bytes[i] = ascii;\n    }\n    return bytes.buffer;\n}\n\n// Mapping between user-friendly data type string, and typed array classes.\nvar _typed_array_map = {\n    'float32': Float32Array,\n    'int8': Int8Array,\n    'int16': Int16Array,\n    'int32': Int32Array,\n    'uint8': Uint8Array,\n    'uint16': Uint16Array,\n    'uint32': Uint32Array,\n};\n\n\nfunction to_array_buffer(data) {\n    // Return a TypedArray from a JSON object describing a data buffer.\n    // storage_type is one of 'javascript_array', 'javascript_typed_array',\n    // 'base64', 'png'\n    var storage_type = data.storage_type;\n\n    // data can also be just a normal typed array, in which case we just return\n    // the argument value.\n    if (storage_type == undefined) {\n        return data;\n    }\n\n    var data_type = data.data_type;\n    var contents = data.buffer;\n\n    if (storage_type == \"javascript_array\") {\n        // A regular JavaScript array, the type must be specified in 'data_type'.\n        return _typed_array_map[data_type](contents);\n    }\n    else if (storage_type == \"javascript_typed_array\" ||\n             storage_type == \"array_buffer\") {\n        // A JavaScript Typedarray.\n        return contents;\n    }\n    else if (storage_type == \"binary\") {\n        // \"binary\" means that binary WebSocket has been used\n        // A JavaScript ArrayBuffer referenced by the data view.\n        return contents.buffer;\n    }\n    else if (storage_type == \"base64\") {\n        var array = decode_base64(contents);\n        return array;\n    }\n}\n\nmodule.exports = {\n    to_array_buffer: to_array_buffer\n};\n","var VispyCanvas = require('./vispycanvas.js');\nvar screenfull = require(\"./lib/screenfull.min.js\");\nrequire(\"./lib/jquery.mousewheel.min.js\")($);\n\n/* Internal functions */\nfunction get_pos(c, e) {\n    var rect = c.getBoundingClientRect();\n    return [e.clientX - rect.left,\n            e.clientY - rect.top];\n}\n\nfunction normalize_pos(c, pos) {\n    return [2*pos[0]/c.width-1, 1-2*pos[1]/c.height];\n}\n\nfunction get_modifiers(e) {\n    var modifiers = [];\n    if (e.altKey) modifiers.push('alt');\n    if (e.ctrlKey) modifiers.push('ctrl');\n    if (e.metaKey) modifiers.push('meta');\n    if (e.shiftKey) modifiers.push('shift');\n    return modifiers;\n}\n\nfunction get_key_text(keynum) {\n    return String.fromCharCode(keynum).toUpperCase().trim();\n}\n\nfunction _get_keynum(e){\n    if(window.event){ // IE\n        return e.keyCode;\n    }\n    else if(e.which){ // Netscape/Firefox/Opera\n        return e.which;\n    }\n}\n\nvar _key_map = {\n    8: 'BACKSPACE',\n    9: 'TAB',\n    13: 'ENTER',\n    16: 'SHIFT',\n    17: 'CONTROL',\n    18: 'ALT',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    33: 'PAGEUP',\n    34: 'PAGEDOWN',\n    35: 'END',\n    36: 'HOME',\n    37: 'LEFT',\n    38: 'UP',\n    39: 'RIGHT',\n    40: 'DOWN',\n    45: 'INSERT',\n    46: 'DELETE',\n    91: 'META',\n    92: 'META',\n    96: '0',\n    97: '1',\n    98: '2',\n    99: '3',\n    100: '4',\n    101: '5',\n    102: '6',\n    103: '7',\n    104: '8',\n    105: '9',\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    112: 'F1',\n    113: 'F2',\n    114: 'F3',\n    115: 'F4',\n    116: 'F5',\n    117: 'F6',\n    118: 'F7',\n    119: 'F8',\n    120: 'F9',\n    121: 'F10',\n    122: 'F11',\n    123: 'F12',\n    186: ';',\n    187: '=',\n    188: ',',\n    189: '-',\n    190: '.',\n    191: '/',\n    192: '`',\n    219: '[',\n    220: '\\\\',\n    221: ']',\n    222: '\\'',\n};\nfunction get_key_code(e){\n    // Return a string representation of a key. It will be interpreted by\n    // Vispy.\n    var keynum = _get_keynum(e);\n    var key_code = _key_map[keynum];\n    if (key_code == undefined) {\n        key_code = get_key_text(keynum);\n    }\n    return key_code;\n}\n\n\n/* Event generation */\nvar _button_map = {\n    0: 1,   // left\n    2: 2,   // right\n    1: 3,   // middle\n};\nfunction gen_mouse_event(c, e, type) {\n    var button;\n    if (c._eventinfo.is_button_pressed)\n        button = _button_map[e.button];\n    else\n        button = null;\n    var pos = get_pos(c.$el.get(0), e);\n    var modifiers = get_modifiers(e);\n    var press_event = c._eventinfo.press_event;\n    var last_event = c._eventinfo.last_event;\n    var event = {\n        'type': type,\n        'pos': pos,\n        'button': button,\n        'is_dragging': press_event != null,\n        'modifiers': modifiers,\n        'delta': null,\n        'press_event': press_event,\n\n        'last_event': null,  // HACK: disabled to avoid recursion problems\n    };\n    return event;\n}\n\nfunction gen_resize_event(c, size) {\n    var event = {\n        'type': 'resize',\n        'size': size,\n    };\n    return event;\n}\n\nfunction gen_paint_event(c) {\n    var event = {\n        'type': 'paint',\n    };\n    return event;\n}\n\nfunction gen_initialize_event(c) {\n    var event = {\n        'type': 'initialize',\n    };\n    return event;\n}\n\nfunction gen_key_event(c, e, type) {\n    var modifiers = get_modifiers(e);\n    var last_event = c._eventinfo.last_event;\n    var event = {\n        'type': type,\n        'modifiers': modifiers,\n        'key_code': get_key_code(e),\n        'last_event': null,  // HACK: disabled to avoid recursion problems\n    };\n    return event;\n}\n\n\n\n/* Internal callback functions */\nVispyCanvas.prototype._mouse_press = function(e) { };\nVispyCanvas.prototype._mouse_release = function(e) { };\nVispyCanvas.prototype._mouse_move = function(e) { };\nVispyCanvas.prototype._mouse_wheel = function(e) { };\nVispyCanvas.prototype._mouse_click = function(e) { };\nVispyCanvas.prototype._mouse_dblclick = function(e) { };\n\nVispyCanvas.prototype._key_press = function(e) { };\nVispyCanvas.prototype._key_release = function(e) { };\n\nVispyCanvas.prototype._initialize = function(e) { };\nVispyCanvas.prototype._resize = function(e) { };\nVispyCanvas.prototype._paint = function(e) { };\nVispyCanvas.prototype._event_tick = function(e) { };\n\n\n\n/* Registering handlers */\nVispyCanvas.prototype.on_mouse_press = function(f) {\n    this._mouse_press = f;\n};\nVispyCanvas.prototype.on_mouse_release = function(f) {\n    this._mouse_release = f;\n};\nVispyCanvas.prototype.on_mouse_move = function(f) {\n    this._mouse_move = f;\n};\nVispyCanvas.prototype.on_mouse_wheel = function(f) {\n    this._mouse_wheel = f;\n};\nVispyCanvas.prototype.on_mouse_dblclick = function(f) {\n    this._mouse_dblclick = f;\n};\nVispyCanvas.prototype.on_key_press = function(f) {\n    this._key_press = f;\n};\nVispyCanvas.prototype.on_key_release = function(f) {\n    this._key_release = f;\n};\nVispyCanvas.prototype.on_initialize = function(f) {\n    this._initialize = f;\n};\nVispyCanvas.prototype.on_resize = function(f) {\n    this._resize = f;\n};\nVispyCanvas.prototype.on_paint = function(f) {\n    this._paint = f;\n};\nVispyCanvas.prototype.on_event_tick = function(f) {\n    this._event_tick = f;\n};\n\n\nVispyCanvas.prototype.initialize = function() {\n    var event = gen_initialize_event(this);\n    this._set_size();\n    this._initialize(event);\n};\nVispyCanvas.prototype._set_size = function(size) {\n    if (size == undefined) {\n        size = [this.$el.width(), this.$el.height()];\n    }\n    this.size = size;\n    this.width = size[0];\n    this.height = size[1];\n    return size;\n};\nVispyCanvas.prototype.paint = function() {\n    /* Add a paint event in the event queue. */\n    var event = gen_paint_event(this);\n    this.event_queue.append(event);\n};\nVispyCanvas.prototype.update = VispyCanvas.prototype.paint;\nVispyCanvas.prototype.resize = function(size) {\n    size = this._set_size(size);\n    var event = gen_resize_event(this, size);\n    this.gl.canvas.width = size[0];\n    this.gl.canvas.height = size[1];\n    // Put the resize event in the queue.\n    this.event_queue.append(event);\n    this._resize(event);\n};\n\nVispyCanvas.prototype.event_tick = function() {\n    this._event_tick();\n    var ncommands = this.execute_pending_commands();\n    if (ncommands > 0) {\n        // At least 1 GLIR command has been executed here.\n        // We call the on_paint callback function here.\n        var event = gen_paint_event(this);\n        this._paint(event);\n    }\n};\n\nVispyCanvas.prototype.is_fullscreen = function() {\n    return (screenfull.enabled) & (screenfull.isFullscreen);\n};\n\nVispyCanvas.prototype.toggle_fullscreen = function() {\n    if (screenfull.enabled) {\n        if(screenfull.isFullscreen) {\n            screenfull.exit();\n            this.resize(this._size);\n        }\n        else {\n            this.$el.width(\"100%\").height(\"100%\");\n            this._size = [this.$el.width(), this.$el.height()];\n            screenfull.request(this.$el[0]);\n            this.resize([screen.width, screen.height]);\n        }\n    }\n};\n\nVispyCanvas.prototype.deactivate_context_menu = function() {\n    document.oncontextmenu = function () { return false; };\n};\n\nVispyCanvas.prototype.resizable = function() {\n    var that = this;\n    this.$el.resizable({\n        resize: function(event, ui) {\n            that.resize([ui.size.width, ui.size.height]);\n        }\n    });\n};\n\n\n/* Event queue prototype */\nfunction _events_can_be_combined(e1, e2) {\n    // Return the list of properties to copy to e2.\n    // The returned list is non empty if the two events can be combined.\n    // It is empty if the two events cannot be combined.\n    var type = e1.type;\n    if (type == e2.type) {\n        if (type == 'mouse_move') {\n            if ((e1.button == e2.button) &\n                (e1.is_dragging == e2.is_dragging) &\n                (e1.modifiers.equals(e2.modifiers))) {\n                return ['pos'];\n            }\n        }\n        else {\n\n        }\n    }\n    return [];\n}\nfunction EventQueue(maxlen) {\n    if (maxlen == undefined) {\n        maxlen = 100;\n    }\n    this._queue = [];\n    this.maxlen = maxlen;\n}\nEventQueue.prototype.clear = function() {\n    this._queue = [];\n};\nEventQueue.prototype.append = function(e, compress) {\n    // Compression allows several similar consecutive events to be merged\n    // into a single event, for performance reasons (notably, 'mouse_move').\n    var add_to_queue = true;\n    if (compress == undefined) {\n        compress = true;\n    }\n    if (compress) {\n        // If the event type is identical to the last event, we\n        // just update the parameters instead of pushing a new event.\n        var last_event = this._queue[this._queue.length - 1];\n        if (last_event != undefined) {\n            // Get the list or properties to combine.\n            var props = _events_can_be_combined(e, last_event);\n            // Combine the properties.\n            if (props.length > 0) {\n                for (var i = 0; i < props.length; i++) {\n                    var prop = props[i];\n                    this._queue[this._queue.length - 1][prop] = e[prop];\n                }\n                // In this case, no need to add the new event to the queue\n                // because the last existing event can be updated (\"combined\"\n                // with the new one).\n                add_to_queue = false;\n            }\n        }\n    }\n    if (add_to_queue) {\n        this._queue.push(e);\n    }\n    // Remove the oldest element if the queue is longer than the maximum allowed side.\n    if (this._queue.length > this.maxlen) {\n        this._queue.shift();\n        // Remove the reference to the removed event in order to clean the GC.\n        this._queue[0].last_event = null;\n    }\n};\nEventQueue.prototype.get = function() {\n    return this._queue;\n};\nObject.defineProperty(EventQueue.prototype, \"length\", {\n    get: function() { return this._queue.length; },\n});\n\n\n/* Canvas initialization */\nfunction init_app(c) {\n\n    // Generate a resize event when the user resizes the canvas with\n    // jQuery resizable.\n    c.$el.resize(function(e) {\n            c.resize([e.width(), e.height()]);\n        }\n    );\n\n    c.event_queue = new EventQueue();\n\n    // This object stores some state necessary to generate the appropriate\n    // events.\n    c._eventinfo = {\n        'type': null,\n        'pos': null,\n        'button': null,\n        'is_dragging': null,\n        'key': null,\n        'modifiers': [],\n        'press_event': null,\n        'last_event': null,\n        'delta': null,\n    };\n\n    // HACK: boolean stating whether a mouse button is pressed.\n    // This is necessary because e.button==0 in two cases: no\n    // button is pressed, or the left button is pressed.\n    c._eventinfo.is_button_pressed = 0;\n\n    c.$el.mousemove(function(e) {\n        var event = gen_mouse_event(c, e, 'mouse_move');\n\n        // Vispy callbacks.\n        c._mouse_move(event);\n\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.mousedown(function(e) {\n        ++c._eventinfo.is_button_pressed;\n        var event = gen_mouse_event(c, e, 'mouse_press');\n\n        // Vispy callbacks.\n        c._mouse_press(event);\n\n        // Save the last press event.\n        c._eventinfo.press_event = event;\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.mouseup(function(e) {\n        --c._eventinfo.is_button_pressed;\n        var event = gen_mouse_event(c, e, 'mouse_release');\n\n        // Vispy callbacks.\n        c._mouse_release(event);\n\n        // Reset the last press event.\n        c._eventinfo.press_event = null;\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.click(function(e) {\n        // Reset the last press event.\n        c._eventinfo.press_event = null;\n    });\n    c.$el.dblclick(function(e) {\n\n        // Reset the last press event.\n        c._eventinfo.press_event = null;\n    });\n    // This requires the mouse wheel jquery plugin.\n    if (c.$el.mousewheel != undefined) {\n        c.$el.mousewheel(function(e) {\n            var event = gen_mouse_event(c, e, 'mouse_wheel');\n            event.delta = [e.deltaX * e.deltaFactor * 0.01,\n                           e.deltaY * e.deltaFactor * 0.01];\n\n            // Vispy callbacks.\n            c._mouse_wheel(event);\n\n            // Save the last event.\n            // c._eventinfo.last_event = event;\n            c.event_queue.append(event);\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n    }\n\n    c.$el.keydown(function(e) {\n        var event = gen_key_event(c, e, 'key_press');\n\n        // Vispy callbacks.\n        c._key_press(event);\n\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.keyup(function(e) {\n        var event = gen_key_event(c, e, 'key_release');\n\n        // Vispy callbacks.\n        c._key_release(event);\n\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n\n    c.$el.mouseout(function(e) {\n    });\n}\n\n\n/* Creation of vispy.events */\nvar events = function() {\n    // Constructor.\n\n};\n\nevents.prototype.init = function(c) {\n    init_app(c);\n};\n\nmodule.exports = new events();\n","var VispyCanvas = require('./vispycanvas.js');\nvar util = require('./util.js');\nvar data = require('./data.js');\n\nvar debug = util.debug;\nvar to_array_buffer = data.to_array_buffer;\nvar JUST_DELETED = 'JUST_DELETED';\n\n/* WebGL utility functions */\nfunction viewport(c) {\n    c.gl.viewport(0, 0, c.width(), c.height());\n}\n\nfunction clear(c, color) {\n    c.gl.clearColor(color[0], color[1], color[2], color[3]);\n    c.gl.clear(c.gl.COLOR_BUFFER_BIT);\n}\n\nfunction compile_shader(c, shader, source) {\n    // TODO: Convert desktop GLSL code if needed\n    console.log(typeof source);\n    if (typeof source !== 'string') {\n        // assume we have a buffer\n        source = String.fromCharCode.apply(null, new Uint8Array(source));\n\n    }\n    source = source.replace(/\\\\n/g, \"\\n\");\n\n    c.gl.shaderSource(shader, source);\n    c.gl.compileShader(shader);\n\n    if (!c.gl.getShaderParameter(shader, c.gl.COMPILE_STATUS))\n    {\n        console.error(c.gl.getShaderInfoLog(shader));\n        return false;\n    }\n\n    return true;\n}\n\nfunction create_attribute(c, program, name) {\n    var attribute_handle = c.gl.getAttribLocation(program, name);\n    return attribute_handle;\n}\n\nfunction activate_attribute(c, attribute_handle, vbo_id, type, stride, offset) {\n    // attribute_handle: attribute handle\n    // vbo_id\n    // type: float, vec3, etc.\n    // stride: 0 by default\n    // offset: 0 by default\n    var _attribute_info = get_attribute_info(type);\n    var attribute_type = _attribute_info[0];  // FLOAT, INT or BOOL\n    var ndim = _attribute_info[1]; // 1, 2, 3 or 4\n\n    _vbo_info = c._ns[vbo_id];\n    var vbo_handle = _vbo_info.handle;\n\n    c.gl.enableVertexAttribArray(attribute_handle);\n    c.gl.bindBuffer(c.gl.ARRAY_BUFFER, vbo_handle);\n    c.gl.vertexAttribPointer(attribute_handle, ndim,\n                             c.gl[attribute_type],\n                             false, stride, offset);\n}\n\nfunction deactivate_attribute(c, attribute_handle) {\n    // c.gl.bindBuffer(c.gl.GL_ARRAY_BUFFER, 0);\n    c.gl.disableVertexAttribArray(attribute_handle);\n}\n\nfunction activate_texture(c, texture_handle, sampler_handle, texture_index) {\n    if (texture_handle === JUST_DELETED) {\n        return;\n    }\n    c.gl.activeTexture(c.gl.TEXTURE0 + texture_index);\n    c.gl.bindTexture(c.gl.TEXTURE_2D, texture_handle);\n    // c.gl.uniform1i(sampler_handle, 0);\n}\n\nfunction deactivate_texture(c, texture_handle, sampler_handle, texture_index) {\n    c.gl.activeTexture(c.gl.TEXTURE0 + texture_index);\n    c.gl.bindTexture(c.gl.TEXTURE_2D, null);\n}\n\nfunction _get_alignment(width) {\n    /* Determines a textures byte alignment.\n\n    If the width isn't a power of 2\n    we need to adjust the byte alignment of the image.\n    The image height is unimportant\n\n    www.opengl.org/wiki/Common_Mistakes#Texture_upload_and_pixel_reads\n\n    we know the alignment is appropriate\n    if we can divide the width by the\n    alignment cleanly\n    valid alignments are 1,2,4 and 8\n    4 is the default\n\n    */\n    var alignments = [8, 4, 2, 1];\n    for (var i = 0; i < alignments.length; i++) {\n        if (width % alignments[i] == 0) {\n            return alignments[i];\n        }\n    }\n}\n\nfunction set_texture_data(c, object_handle, gl_type, format, width, height, array, offset, shape, dtype) {\n    c.gl.bindTexture(gl_type, object_handle);\n\n    // TODO: choose a better alignment\n    c.gl.pixelStorei(c.gl.UNPACK_ALIGNMENT, 1);\n\n    if (array === null) {\n        // special texture attached to frame buffer to be rendered to\n        c.gl.texImage2D(gl_type, 0, format, width, height, 0, format, c.gl.UNSIGNED_BYTE, array);\n    } else if (array.getContext) {\n        // A canvas object\n        c.gl.texImage2D(gl_type, 0, c.gl.RGBA, c.gl.RGBA, c.gl.UNSIGNED_BYTE, array);\n    } else if (array.canvas) {\n        // A context object\n        c.gl.texImage2D(gl_type, 0, c.gl.RGBA, c.gl.RGBA, c.gl.UNSIGNED_BYTE, array.canvas);\n    } else {\n        var array_view;\n        if (dtype == c.gl.FLOAT) {\n            array_view = new Float32Array(array);\n        } else {\n            array_view = new Uint8Array(array);\n        }\n\n        // if this isn't initializing the texture (texImage2D) then see if we\n        // can set just part of the texture\n        if (offset && shape && ((shape[0] !== height) || (shape[1] !== width))) {\n            var new_width = shape[shape.length - 2] * shape[shape.length - 1];\n            var alignment = _get_alignment(new_width);\n            c.gl.pixelStorei(c.gl.UNPACK_ALIGNMENT, alignment);\n            c.gl.texSubImage2D(gl_type, 0, offset[1], offset[0],\n                shape[1], shape[0], format, dtype, array_view);\n        } else {\n            c.gl.pixelStorei(c.gl.UNPACK_ALIGNMENT, 1);\n            c.gl.texImage2D(gl_type, 0, format, width, height, 0,\n                format, dtype, array_view);\n        }\n    }\n}\n\nfunction set_buffer_data(c, object_handle, gl_type, offset, array, reuse) {\n    // Bind the buffer before setting the data.\n    c.gl.bindBuffer(gl_type, object_handle);\n\n    // Upload the data.\n    if (!reuse) {\n        // The existing buffer was empty: we create it.\n        c.gl.bufferData(gl_type, array, c.gl.STATIC_DRAW);\n    }\n    else {\n        // We reuse the existing buffer.\n        c.gl.bufferSubData(gl_type, offset, array);\n    }\n}\n\nfunction set_uniform(c, uniform_handle, uniform_function, value) {\n    // Get a TypedArray.\n    array = to_array_buffer(value);\n\n    if (uniform_function.indexOf('Matrix') > 0) {\n        // Matrix uniforms.\n        c.gl[uniform_function](uniform_handle, false, array);\n    }\n    else {\n        // Scalar uniforms.\n        c.gl[uniform_function](uniform_handle, array);\n    }\n}\n\nvar _dtype_to_gl_dtype = {\n    'float32': 'FLOAT',\n    'uint8': 'UNSIGNED_BYTE',\n};\nfunction get_gl_dtype(dtype) {\n    return _dtype_to_gl_dtype[dtype];\n}\n\nvar _attribute_type_map = {\n    'float': ['FLOAT', 1],\n    'vec2': ['FLOAT', 2],\n    'vec3': ['FLOAT', 3],\n    'vec4': ['FLOAT', 4],\n\n    'int': ['INT', 1],\n    'ivec2': ['INT', 2],\n    'ivec3': ['INT', 3],\n    'ivec4': ['INT', 4],\n};\nfunction get_attribute_info(type) {\n    // type: vec2, ivec3, float, etc.\n    return _attribute_type_map[type];\n}\n\nvar _uniform_type_map = {\n    'float': 'uniform1fv',\n    'vec2': 'uniform2fv',\n    'vec3': 'uniform3fv',\n    'vec4': 'uniform4fv',\n\n    'int': 'uniform1iv',\n    'ivec2': 'uniform2iv',\n    'ivec3': 'uniform3iv',\n    'ivec4': 'uniform4iv',\n\n    'mat2': 'uniformMatrix2fv',\n    'mat3': 'uniformMatrix3fv',\n    'mat4': 'uniformMatrix4fv',\n};\nfunction get_uniform_function(type) {\n    // Find OpenGL uniform function.\n    return _uniform_type_map[type];\n}\n\nvar _gl_type_map = {\n    VertexBuffer: 'ARRAY_BUFFER',\n    IndexBuffer: 'ELEMENT_ARRAY_BUFFER',\n    Texture2D: 'TEXTURE_2D',\n};\n\nfunction get_gl_type(object_type) {\n    return _gl_type_map[object_type];\n}\n\nvar _gl_attachment_map = {\n    'color': ['COLOR_ATTACHMENT0', 'RGBA4'],\n    'depth': ['DEPTH_ATTACHMENT', 'DEPTH_COMPONENT16'],\n    'stencil': ['STENCIL_ATTACHMENT', 'STENCIL_INDEX8'],\n};\n\nfunction get_attachment_type(type_str) {\n    return _gl_attachment_map[type_str][0];\n}\n\nfunction get_attachment_format(type_str) {\n    return _gl_attachment_map[type_str][1];\n}\n\nfunction parse_enum(c, str) {\n    // Parse an enum or combination of enums stored in a string.\n    var strs = str.split('|');\n    var value = 0;\n    for (var i = 0; i < strs.length; i++) {\n        var name = strs[i].toUpperCase().trim();\n        value = value | c.gl[name];\n    }\n    return value;\n}\n\nfunction validate_framebuffer(c) {\n    var status = c.gl.checkFramebufferStatus(c.gl.FRAMEBUFFER);\n    if (status == c.gl.FRAMEBUFFER_COMPLETE) {\n        return;\n    }\n    // c.gl.FRAMEBUFFER_INCOMPLETE_FORMATS: // not in es 2.0\n    //     'Internal format of attachment is not renderable.'\n    if (status == c.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT) {\n        throw 'FrameBuffer attachments are incomplete.';\n    }\n    else if (status == c.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT) {\n        throw 'No valid attachments in the FrameBuffer.';\n    }\n    else if (status == c.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS) {\n        throw 'attachments do not have the same width and height.';\n    }\n    else if (status == c.gl.FRAMEBUFFER_UNSUPPORTED) {\n        throw 'Combination of internal formats used by attachments is not supported.';\n    }\n    else {\n        throw 'Unknown framebuffer error' + status;\n    }\n}\n\nfunction activate_framebuffer(c, framebuffer_id) {\n    var fb = c._ns[framebuffer_id];\n    var stack = c.env.fb_stack;\n    if (stack.length == 0) {\n        stack.push(null);\n    }\n\n    if (stack[stack.length - 1] === fb.handle) {\n        debug(\"Frame buffer already active {0}\".format(framebuffer_id));\n        return;\n    }\n    debug(\"Binding frame buffer {0}.\".format(framebuffer_id));\n    c.gl.bindFramebuffer(c.gl.FRAMEBUFFER, fb.handle);\n    stack.push(fb.handle);\n}\n\nfunction deactivate_framebuffer(c, framebuffer_id) {\n    var fb = c._ns[framebuffer_id];\n    var stack = c.env.fb_stack;\n    if (stack.length == 0) {\n        stack.push(null);\n    }\n\n    while (stack[stack.length - 1] === fb.handle) {\n        // Deactivate current frame buffer\n        stack.pop(); // 'unbind' current buffer\n    }\n    // Activate previous frame buffer\n    // NOTE: out of bounds index if trying to unbind the default (null) framebuffer\n    debug(\"Binding previous frame buffer\");\n    c.gl.bindFramebuffer(c.gl.FRAMEBUFFER, stack[stack.length - 1]);\n}\n\nfunction init_env_cache(c) {\n    c.env = {\n        'fb_stack': [],\n    };\n}\n\n\n/* Glir queue prototype */\nfunction GlirQueue() {\n    this._queue = [];\n}\nGlirQueue.prototype.clear = function() {\n    this._queue = [];\n};\nGlirQueue.prototype.append = function(e) {\n    this._queue.push(e);\n};\nGlirQueue.prototype.append_multi = function(es) {\n    for (var i = 0; i < es.length; i++) {\n        this._queue.push(es[i]);\n    }\n};\nGlirQueue.prototype.get = function() {\n    return this._queue;\n};\nObject.defineProperty(GlirQueue.prototype, \"length\", {\n    get: function() { return this._queue.length; },\n});\n\n\n/* Vispy canvas GLIR methods */\nVispyCanvas.prototype.set_deferred = function(deferred) {\n    this._deferred = deferred;\n};\n\nVispyCanvas.prototype.execute_pending_commands = function() {\n    /* Return the number of executed GLIR commands. */\n    var q = this.glir_queue.get();\n    var execute_up_to = -1;\n    if (q.length == 0) {\n        return 0;\n    }\n\n    // Only start executing if we see a SWAP command\n    // Any 'draw' command (clear, draw, etc) will cause the browser to\n    // swap the webgl drawing buffers. If we start executing draw commands\n    // before we are ready for the buffers to swap we could get an incomplete\n    // canvas (only 'clear' being completed, less than all of the\n    // expected objects being drawn, etc).\n    // This technically only happens if not all the GLIR commands were\n    // received by the time this animation loop started.\n    for (var i = 0; i < q.length; i++) {\n        if (q[i][0] === 'SWAP') {\n            execute_up_to = i;\n            break;\n        }\n    }\n    // Execute all commands up to and including the SWAP\n    for (i = 0; i <= execute_up_to; i++) {\n        this.command(q[i], false);\n    }\n\n    if (execute_up_to >= 0) {\n        debug(\"Processed {0} events.\".format(execute_up_to + 1));\n        // this.glir_queue.clear();\n        this.glir_queue._queue = this.glir_queue._queue.slice(execute_up_to + 1);\n    }\n    return execute_up_to + 1;\n};\n\nVispyCanvas.prototype.command = function(command, deferred) {\n    if (deferred === undefined) {\n        deferred = this._deferred;\n    }\n    var method = command[0].toLowerCase();\n    if (deferred) {\n        this.glir_queue.append(command);\n    }\n    else {\n        this.glir[method](this, command.slice(1));\n    }\n};\n\n\n/* Creation of vispy.gloo.glir */\nvar glir = function() { };\n\nglir.prototype.init = function(c) {\n    // Namespace with the table of all symbols used by GLIR.\n\n    // The key is user-specified and is named the **id**.\n    // The WebGL internal handle is called the **handle**.\n\n    // For each id key, the value is an object with the following properties:\n    // * object_type ('VertexBuffer', 'Program', etc.)\n    // * handle (the WebGL internal handle, for all objects)\n    // * data_type (for Buffers)\n    // * offset (for Buffers)\n    // * attributes (for Programs)\n    // * uniforms (for Programs)\n    c._ns = {};\n    // Deferred mode is enabled by default.\n    c._deferred = true;\n    // Per-context storage for GLIR objects (framebuffer stack, etc)\n    init_env_cache(c);\n    c.glir_queue = new GlirQueue();\n    c.glir = this;\n};\n\nglir.prototype.current = function(c, args) {\n    init_env_cache(c);\n    c.gl.bindFramebuffer(c.gl.FRAMEBUFFER, null);\n};\n\nglir.prototype.swap = function(c, args) {\n\n};\n\nglir.prototype.create = function(c, args) {\n    var id = args[0];\n    var cls = args[1];\n    if (cls == 'VertexBuffer') {\n        debug(\"Creating vertex buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createBuffer(),\n            size: 0,  // current size of the buffer\n        };\n    }\n    else if (cls == 'IndexBuffer') {\n        debug(\"Creating index buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createBuffer(),\n            size: 0,  // current size of the buffer\n        };\n    }\n    else if (cls == 'FrameBuffer') {\n        debug(\"Creating frame buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createFramebuffer(),\n            size: 0,  // current size of the buffer\n            validated: false,\n        };\n    }\n    else if (cls == 'RenderBuffer') {\n        debug(\"Creating render buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createRenderbuffer(),\n            size: 0,  // current size of the buffer\n        };\n    }\n    else if (cls == 'Texture2D') {\n        debug(\"Creating texture '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createTexture(),\n            size: 0,  // current size of the texture\n            shape: [],\n        };\n    }\n    else if (cls == 'Program') {\n        debug(\"Creating program '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createProgram(),\n            attributes: {},\n            uniforms: {},\n            textures: {}, // map texture_id -> sampler_name, sampler_handle, number, handle\n            texture_uniforms: {}, // map sampler_name -> texture_id\n        };\n    }\n    else if (cls == 'VertexShader') {\n        debug(\"Creating VertexShader '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createShader(c.gl.VERTEX_SHADER),\n        };\n    }\n    else if (cls == 'FragmentShader') {\n        debug(\"Creating FragmentShader '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createShader(c.gl.FRAGMENT_SHADER),\n        };\n    }\n};\n\nglir.prototype.delete = function(c, args) {\n    var id = args[0];\n    var cls = c._ns[id].object_type;\n    var handle = c._ns[id].handle;\n    c._ns[id].handle = JUST_DELETED;\n    if (cls == 'VertexBuffer') {\n        debug(\"Deleting vertex buffer '{0}'.\".format(id));\n        c.gl.deleteBuffer(handle);\n    }\n    else if (cls == 'IndexBuffer') {\n        debug(\"Deleting index buffer '{0}'.\".format(id));\n        c.gl.deleteBuffer(handle);\n    }\n    else if (cls == 'FrameBuffer') {\n        debug(\"Deleting frame buffer '{0}'.\".format(id));\n        c.gl.deleteFramebuffer(handle);\n    }\n    else if (cls == 'RenderBuffer') {\n        debug(\"Deleting render buffer '{0}'.\".format(id));\n        c.gl.deleteRenderbuffer(handle);\n    }\n    else if (cls == 'Texture2D') {\n        debug(\"Deleting texture '{0}'.\".format(id));\n        c.gl.deleteTexture(handle);\n    }\n    else if (cls == 'Program') {\n        debug(\"Deleting program '{0}'.\".format(id));\n        c.gl.deleteProgram(handle);\n    }\n    else if (cls.indexOf('Shader') >= 0) {\n        debug(\"Deleting shader '{0}'.\".format(id));\n        c.gl.deleteShader(handle);\n    }\n};\n\nglir.prototype.size = function(c, args) {\n    var object_id = args[0];\n    var size = args[1];  // WARNING: size must be in bytes!\n    var format = args[2];\n    var object = c._ns[object_id];\n    var object_handle = object.handle;\n    var object_type = object.object_type;\n    var gl_type = c.gl[get_gl_type(object_type)];\n\n    // Textures.\n    if (object_type.indexOf('Texture') >= 0) {\n        // format is 'LUMINANCE', 'ALPHA', 'LUMINANCE_ALPHA', 'RGB' or 'RGBA'\n        object.format = format.toUpperCase();\n        debug(\"Setting texture size to {1} for '{0}'.\".format(object_id, size));\n        // HACK: it doesn't seem we can change the texture size without\n        // allocating a buffer in WebGL, so we just store the size and\n        // format in the object, and we'll use this information in the\n        // subsequent DATA call.\n    }\n    else if (object_type == 'RenderBuffer') {\n        c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, object_handle);\n        object.format = c.gl[get_attachment_format(format)];\n        // size is Y, X, Z\n        // assume Y is rows (height), X is columns (width)\n        // assume Z is color information (ignored)\n        c.gl.renderbufferStorage(c.gl.RENDERBUFFER, object.format, size[1], size[0]);\n        c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, null);\n    }\n    // Buffers\n    else\n    {\n        debug(\"Setting buffer size to {1} for '{0}'.\".format(object_id, size));\n        // Reuse the buffer if the existing size is not null.\n        set_buffer_data(c, object_handle, gl_type, 0, size, false);\n    }\n    // Save the size.\n    object.size = size;\n};\n\nglir.prototype.data = function(c, args) {\n    var object_id = args[0];\n    var offset = args[1];\n    var data = args[2];\n    var object = c._ns[object_id];\n    var object_type = object.object_type; // VertexBuffer, IndexBuffer, or Texture2D\n    var object_handle = object.handle;\n    var gl_type = c.gl[get_gl_type(object_type)];\n    // Get a TypedArray.\n    var array = to_array_buffer(data);\n\n    if (object_type.indexOf('Shader') >= 0) {\n        // Compile shader code to shader object\n        compile_shader(c, object_handle, array);\n    }\n    // Textures.\n    else if (object_type.indexOf('Texture') >= 0) {\n        // The texture shape was specified in SIZE\n        var shape = object.size;\n        // WARNING: this is height and then width, not the other way\n        // around.\n        var height = shape[0];\n        var width = shape[1];\n\n        // The texture format was specified in SIZE.\n        var format = c.gl[object.format];\n\n        debug(\"Setting texture data for '{0}'.\".format(object_id));\n        // `data.shape` comes from notebook backend and vispy webgl extension\n        // without it, subimage texture writes do not work\n        var gl_dtype = c.gl[get_gl_dtype(data.dtype)];\n        set_texture_data(c, object_handle, gl_type, format, width, height, array, offset, data.shape, gl_dtype);\n        object.shape = shape;\n    }\n    // Buffers\n    else\n    {\n        debug(\"Setting buffer data for '{0}'.\".format(object_id));\n        // Reuse the buffer if the existing size is not null.\n        set_buffer_data(c, object_handle, gl_type, offset, array, object.size > 0);\n        object.size = array.byteLength;\n    }\n};\n\nglir.prototype.attribute = function(c, args) {\n    var program_id = args[0];\n    var name = args[1];\n    var type = args[2];\n    // TODO: support non-VBO data\n    var vbo_id = args[3][0];\n    var stride = args[3][1];\n    var offset = args[3][2];\n\n    var program_handle = c._ns[program_id].handle;\n\n    debug(\"Creating attribute '{0}' for program '{1}'.\".format(\n            name, program_id\n        ));\n    var attribute_handle = create_attribute(c, program_handle, name);\n\n    // Store the attribute handle in the attributes array of the program.\n    c._ns[program_id].attributes[name] = {\n        handle: attribute_handle,\n        type: type,\n        vbo_id: vbo_id,\n        stride: stride,\n        offset: offset,\n    };\n};\n\nglir.prototype.uniform = function(c, args) {\n    var program_id = args[0];\n    var name = args[1];\n    var type = args[2];\n    var value = args[3];\n\n    var program_handle = c._ns[program_id].handle;\n    var uniform_handle;\n    var uniform_function;\n    var uniform_info;\n\n    c.gl.useProgram(program_handle);\n\n    // Check the cache.\n    if (c._ns[program_id].uniforms[name] == undefined) {\n        // If necessary, we create the uniform and cache both its handle and\n        // GL function.\n        debug(\"Creating uniform '{0}' for program '{1}'.\".format(\n                name, program_id\n            ));\n        uniform_handle = c.gl.getUniformLocation(program_handle, name);\n        uniform_function = get_uniform_function(type);\n        // We cache the uniform handle and the uniform function name as well.\n        c._ns[program_id].uniforms[name] = [uniform_handle, uniform_function];\n    }\n\n    debug(\"Setting uniform '{0}' to '{1}' with {2} elements.\".format(\n            name, value, value.length\n        ));\n    uniform_info = c._ns[program_id].uniforms[name];\n    uniform_handle = uniform_info[0];\n    uniform_function = uniform_info[1];\n    set_uniform(c, uniform_handle, uniform_function, value);\n};\n\nglir.prototype.texture = function(c, args) {\n    var program_id = args[0];\n    var sampler_name = args[1];\n    var texture_id = args[2];\n\n    var program = c._ns[program_id];\n    var program_handle = program.handle;\n    var texture_handle = c._ns[texture_id].handle;\n\n    if (texture_handle === JUST_DELETED) {\n        debug(\"Removing texture '{0}' from program '{1}'\".format(\n            texture_id, program_id\n        ));\n        delete program.textures[texture_id];\n        return;\n    }\n\n    debug(\"Initializing texture '{0}' for program '{1}'.\".format(\n        texture_id, program_id));\n\n    // FIXME: Probably should store textures by sampler name, not texture id\n    if (program.texture_uniforms.hasOwnProperty(sampler_name)) {\n        // This program has had this sampler uniform name set before\n        // Let's remove the old one\n        debug('Removing previously assigned texture for \\'{0}\\''.format(sampler_name));\n        delete program.textures[program.texture_uniforms[sampler_name]];\n    }\n\n    // Set the sampler uniform value.\n    var sampler_handle = c.gl.getUniformLocation(program_handle, sampler_name);\n    program.texture_uniforms[sampler_name] = texture_id;\n\n    c._ns[program_id].textures[texture_id] = {\n        sampler_name: sampler_name,\n        sampler_handle: sampler_handle,\n        number: -1, // assigned later\n        handle: texture_handle,\n    };\n};\n\nglir.prototype.interpolation = function(c, args) {\n    var texture_id = args[0];\n    var min = args[1].toUpperCase();\n    var mag = args[2].toUpperCase();\n    var texture_handle = c._ns[texture_id].handle;\n\n    var gl_type = c.gl.TEXTURE_2D;\n    c.gl.bindTexture(gl_type, texture_handle);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_MIN_FILTER, c.gl[min]);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_MAG_FILTER, c.gl[mag]);\n    c.gl.bindTexture(gl_type, null);\n};\n\nglir.prototype.wrapping = function(c, args) {\n    var texture_id = args[0];\n    var wrapping = args[1];\n    var texture_handle = c._ns[texture_id].handle;\n\n    var gl_type = c.gl.TEXTURE_2D;\n    c.gl.bindTexture(gl_type, texture_handle);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_WRAP_S,\n                       c.gl[wrapping[0].toUpperCase()]);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_WRAP_T,\n                       c.gl[wrapping[1].toUpperCase()]);\n    c.gl.bindTexture(gl_type, null);\n};\n\nglir.prototype.draw = function(c, args) {\n    var program_id = args[0];\n    var mode = args[1].toUpperCase();\n    var selection = args[2];\n\n    var program_handle = c._ns[program_id].handle;\n    var attributes = c._ns[program_id].attributes;\n    var textures = c._ns[program_id].textures;\n    var texture_number = 0;\n    var texture;\n    var attribute_name;\n    var texture_id;\n\n    // Activate the program.\n    c.gl.useProgram(program_handle);\n\n    // Activate all attributes in the program.\n    for (attribute_name in attributes) {\n        var attribute = attributes[attribute_name];\n        debug(\"Activating attribute '{0}' for program '{1}'.\".format(\n            attribute_name, program_id));\n        activate_attribute(c, attribute.handle, attribute.vbo_id,\n            attribute.type, attribute.stride, attribute.offset);\n    }\n\n    // Activate all textures in the program.\n    for (texture_id in textures) {\n        texture = textures[texture_id];\n        if (c._ns[texture_id].handle === JUST_DELETED) {\n            debug(\"Ignoring texture '{0}' from program '{1}'\".format(\n                texture_id, program_id\n            ));\n            texture.handle = JUST_DELETED;\n            continue;\n        }\n        texture.number = texture_number;\n        texture_number += 1;\n        debug(\"Activating texture '{0}' for program '{1}' as number '{2}'.\".format(\n            texture_id, program_id, texture.number));\n        activate_texture(c, texture.handle, texture.sampler_handle, texture.number);\n        c.gl.uniform1i(texture.sampler_handle, texture.number);\n    }\n\n    // Draw the program.\n    var count;\n    if (selection.length == 2) {\n        // Draw the program without index buffer.\n        var start = selection[0];\n        count = selection[1];\n        debug(\"Rendering program '{0}' with {1}.\".format(\n            program_id, mode));\n        c.gl.drawArrays(c.gl[mode], start, count);\n    }\n    else if (selection.length == 3) {\n        // Draw the program with index buffer.\n        var index_buffer_id = selection[0];\n        var index_buffer_type = selection[1];\n        count = selection[2];\n        // Get the index buffer handle from the namespace.\n        var index_buffer_handle = c._ns[index_buffer_id].handle;\n        debug(\"Rendering program '{0}' with {1} and index buffer '{2}' of type '{3}'.\".format(\n            program_id, mode, index_buffer_id, index_buffer_type));\n        // Activate the index buffer.\n        c.gl.bindBuffer(c.gl.ELEMENT_ARRAY_BUFFER, index_buffer_handle);\n        c.gl.drawElements(c.gl[mode], count, c.gl[index_buffer_type], 0);\n    }\n\n    // Deactivate attributes.\n    for (attribute_name in attributes) {\n        debug(\"Deactivating attribute '{0}' for program '{1}'.\".format(\n            attribute_name, program_id));\n        deactivate_attribute(c, attributes[attribute_name].handle);\n    }\n\n    // Deactivate textures.\n    var new_textures = {};\n    for (texture_id in textures) {\n        texture = textures[texture_id];\n        debug(\"Deactivating texture '{0}' for program '{1}'.\".format(\n            texture_id, program_id));\n        deactivate_texture(c, texture.handle, texture.sampler_handle, texture.number);\n\n        // Don't include any of the textures that were deleted in this program\n        if (c._ns[texture_id].handle != JUST_DELETED) {\n            new_textures[texture_id] = texture;\n        }\n    }\n    c._ns[program_id].textures = new_textures;\n};\n\nglir.prototype.attach = function(c, args) {\n    // framebuffer or shader object ID\n    var dst_id = args[0];\n    var dst_obj = c._ns[dst_id];\n    var dst_type = dst_obj.object_type;\n    var dst_handle = dst_obj.handle;\n    if (dst_type == 'Program') {\n        // attaching to program, must be a shader we're attaching\n        var shader_id = args[1];\n        var shader_handle = c._ns[shader_id].handle;\n        c.gl.attachShader(dst_handle, shader_handle);\n        return;\n    }\n\n    // Attach to framebuffer\n    var object_id = args[2];\n    var attach_type = c.gl[get_attachment_type(args[1])];\n    var object;\n    activate_framebuffer(c, dst_id);\n    if (object_id == 0) {\n        debug('Attaching RenderBuffer object {0} to framebuffer {1}'.format(object_id, dst_id));\n        c.gl.framebufferRenderbuffer(c.gl.FRAMEBUFFER, attach_type, c.gl.RENDERBUFFER, null);\n    } else {\n        object = c._ns[object_id];\n        debug('Attaching {0} object {1} to framebuffer {2} for {3}'.format(object.object_type, object_id, dst_id, args[1]));\n        if (object.object_type == 'RenderBuffer') {\n            c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, object.handle);\n            c.gl.framebufferRenderbuffer(c.gl.FRAMEBUFFER, attach_type, c.gl.RENDERBUFFER, object.handle);\n            c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, null);\n        }\n        else if (object.object_type == 'Texture2D') {\n            // null or undefined\n            if (object.shape.length == 0) {\n                debug('Setting empty texture data to unset texture before attaching to framebuffer');\n                set_texture_data(c, object.handle, c.gl.TEXTURE_2D,\n                    c.gl[object.format], object.size[1], object.size[0], null);\n            }\n            // INFO: 0 is for mipmap level 0 (default) of the texture\n            c.gl.bindTexture(c.gl.TEXTURE_2D, object.handle);\n            c.gl.framebufferTexture2D(c.gl.FRAMEBUFFER, attach_type, c.gl.TEXTURE_2D, object.handle, 0);\n            c.gl.bindTexture(c.gl.TEXTURE_2D, null);\n        }\n    }\n    c._ns[dst_id].validated = false;\n    deactivate_framebuffer(c, dst_id);\n};\n\nglir.prototype.link = function(c, args) {\n    var program_handle = c._ns[args[0]].handle;\n    c.gl.linkProgram(program_handle);\n\n    if (!c.gl.getProgramParameter(program_handle, c.gl.LINK_STATUS))\n    {\n        console.warn(\"Could not initialise shaders on program '{0}'.\".format(program_handle));\n    }\n};\n\nglir.prototype.framebuffer = function(c, args) {\n    var framebuffer_id = args[0];\n    var bind = args[1];\n    var fb = c._ns[framebuffer_id];\n\n    if (bind) {\n        debug('Binding framebuffer {0}'.format(framebuffer_id));\n        activate_framebuffer(c, framebuffer_id);\n        if (!fb.validated) {\n            fb.validated = true;\n            validate_framebuffer(c);\n        }\n    }\n    else {\n        debug('Unbinding framebuffer {0}'.format(framebuffer_id));\n        deactivate_framebuffer(c, framebuffer_id);\n    }\n};\n\nglir.prototype.func = function(c, args) {\n    var name = args[0];\n    debug(\"Calling {0}({1}).\".format(name, args.slice(1)));\n\n    // Handle enums: replace strings by global GL variables.\n    for (var i = 1; i < args.length; i++) {\n        if (typeof args[i] === 'string') {\n            args[i] = parse_enum(c, args[i]);\n        }\n    }\n\n    var func = c.gl[name];\n    var func_args = args.slice(1);\n    func.apply(c.gl, func_args);\n};\n\nmodule.exports = new glir();\n","var glir = require('./gloo.glir.js');\n\nfunction init_webgl(c) {\n    // Get the DOM object, not the jQuery one.\n    var canvas = c.$el.get(0);\n    c.gl = canvas.getContext(\"webgl\") ||\n           canvas.getContext(\"experimental-webgl\");\n    var ext = c.gl.getExtension('OES_standard_derivatives') || c.gl.getExtension('MOZ_OES_standard_derivatives') || c.gl.getExtension('WEBKIT_OES_standard_derivatives');\n    if (ext === null) {\n        console.warn('Extension \\'OES_standard_derivatives\\' is not supported in this browser. Some features may not work as expected');\n    }\n    ext = c.gl.getExtension('OES_element_index_uint') ||\n        c.gl.getExtension('MOZ_OES_element_index_uint') ||\n        c.gl.getExtension('WEBKIT_OES_element_index_uint');\n    if (ext === null) {\n        console.warn('Extension \\'OES_element_index_uint\\' is not supported in this browser. Some features may not work as expected');\n    }\n    ext = c.gl.getExtension('OES_texture_float');\n    // ||\n    //     c.gl.getExtension('MOZ_OES_element_index_uint') ||\n    //     c.gl.getExtension('WEBKIT_OES_element_index_uint');\n    if (ext === null) {\n        console.warn('Extension \\'OES_texture_float\\' is not supported in this browser. Some features may not work as expected');\n    }\n\n    ext = c.gl.getExtension('OES_texture_float_linear');\n    if (ext === null) {\n        console.warn('Extension \\'OES_texture_float_linear\\' is not supported in this browser. Some features may not work as expected');\n    }\n\n    // c.gl.getExtension('EXT_shader_texture_lod');\n}\n\n\n/* Creation of vispy.gloo */\nvar gloo = function() {\n    this.glir = glir;\n    // Constructor.\n\n};\n\ngloo.prototype.init = function(c) {\n    init_webgl(c);\n    this.glir.init(c);\n};\n\n\nmodule.exports = new gloo();\n","/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)\n * Licensed under the MIT License (LICENSE.txt).\n *\n * Version: 3.1.12\n *\n * Requires: jQuery 1.2.2+\n */\n!function(a){\"function\"==typeof define&&define.amd?define([\"jquery\"],a):\"object\"==typeof exports?module.exports=a:a(jQuery)}(function(a){function b(b){var g=b||window.event,h=i.call(arguments,1),j=0,l=0,m=0,n=0,o=0,p=0;if(b=a.event.fix(g),b.type=\"mousewheel\",\"detail\"in g&&(m=-1*g.detail),\"wheelDelta\"in g&&(m=g.wheelDelta),\"wheelDeltaY\"in g&&(m=g.wheelDeltaY),\"wheelDeltaX\"in g&&(l=-1*g.wheelDeltaX),\"axis\"in g&&g.axis===g.HORIZONTAL_AXIS&&(l=-1*m,m=0),j=0===m?l:m,\"deltaY\"in g&&(m=-1*g.deltaY,j=m),\"deltaX\"in g&&(l=g.deltaX,0===m&&(j=-1*l)),0!==m||0!==l){if(1===g.deltaMode){var q=a.data(this,\"mousewheel-line-height\");j*=q,m*=q,l*=q}else if(2===g.deltaMode){var r=a.data(this,\"mousewheel-page-height\");j*=r,m*=r,l*=r}if(n=Math.max(Math.abs(m),Math.abs(l)),(!f||f>n)&&(f=n,d(g,n)&&(f/=40)),d(g,n)&&(j/=40,l/=40,m/=40),j=Math[j>=1?\"floor\":\"ceil\"](j/f),l=Math[l>=1?\"floor\":\"ceil\"](l/f),m=Math[m>=1?\"floor\":\"ceil\"](m/f),k.settings.normalizeOffset&&this.getBoundingClientRect){var s=this.getBoundingClientRect();o=b.clientX-s.left,p=b.clientY-s.top}return b.deltaX=l,b.deltaY=m,b.deltaFactor=f,b.offsetX=o,b.offsetY=p,b.deltaMode=0,h.unshift(b,j,l,m),e&&clearTimeout(e),e=setTimeout(c,200),(a.event.dispatch||a.event.handle).apply(this,h)}}function c(){f=null}function d(a,b){return k.settings.adjustOldDeltas&&\"mousewheel\"===a.type&&b%120===0}var e,f,g=[\"wheel\",\"mousewheel\",\"DOMMouseScroll\",\"MozMousePixelScroll\"],h=\"onwheel\"in document||document.documentMode>=9?[\"wheel\"]:[\"mousewheel\",\"DomMouseScroll\",\"MozMousePixelScroll\"],i=Array.prototype.slice;if(a.event.fixHooks)for(var j=g.length;j;)a.event.fixHooks[g[--j]]=a.event.mouseHooks;var k=a.event.special.mousewheel={version:\"3.1.12\",setup:function(){if(this.addEventListener)for(var c=h.length;c;)this.addEventListener(h[--c],b,!1);else this.onmousewheel=b;a.data(this,\"mousewheel-line-height\",k.getLineHeight(this)),a.data(this,\"mousewheel-page-height\",k.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var c=h.length;c;)this.removeEventListener(h[--c],b,!1);else this.onmousewheel=null;a.removeData(this,\"mousewheel-line-height\"),a.removeData(this,\"mousewheel-page-height\")},getLineHeight:function(b){var c=a(b),d=c[\"offsetParent\"in a.fn?\"offsetParent\":\"parent\"]();return d.length||(d=a(\"body\")),parseInt(d.css(\"fontSize\"),10)||parseInt(c.css(\"fontSize\"),10)||16},getPageHeight:function(b){return a(b).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};a.fn.extend({mousewheel:function(a){return a?this.bind(\"mousewheel\",a):this.trigger(\"mousewheel\")},unmousewheel:function(a){return this.unbind(\"mousewheel\",a)}})});","/*!\n* screenfull\n* v1.2.0 - 2014-04-29\n* (c) Sindre Sorhus; MIT License\n*/\n!function(){\"use strict\";var a=\"undefined\"!=typeof module&&module.exports,b=\"undefined\"!=typeof Element&&\"ALLOW_KEYBOARD_INPUT\"in Element,c=function(){for(var a,b,c=[[\"requestFullscreen\",\"exitFullscreen\",\"fullscreenElement\",\"fullscreenEnabled\",\"fullscreenchange\",\"fullscreenerror\"],[\"webkitRequestFullscreen\",\"webkitExitFullscreen\",\"webkitFullscreenElement\",\"webkitFullscreenEnabled\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"webkitRequestFullScreen\",\"webkitCancelFullScreen\",\"webkitCurrentFullScreenElement\",\"webkitCancelFullScreen\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"mozRequestFullScreen\",\"mozCancelFullScreen\",\"mozFullScreenElement\",\"mozFullScreenEnabled\",\"mozfullscreenchange\",\"mozfullscreenerror\"],[\"msRequestFullscreen\",\"msExitFullscreen\",\"msFullscreenElement\",\"msFullscreenEnabled\",\"MSFullscreenChange\",\"MSFullscreenError\"]],d=0,e=c.length,f={};e>d;d++)if(a=c[d],a&&a[1]in document){for(d=0,b=a.length;b>d;d++)f[c[0][d]]=a[d];return f}return!1}(),d={request:function(a){var d=c.requestFullscreen;a=a||document.documentElement,/5\\.1[\\.\\d]* Safari/.test(navigator.userAgent)?a[d]():a[d](b&&Element.ALLOW_KEYBOARD_INPUT)},exit:function(){document[c.exitFullscreen]()},toggle:function(a){this.isFullscreen?this.exit():this.request(a)},onchange:function(){},onerror:function(){},raw:c};return c?(Object.defineProperties(d,{isFullscreen:{get:function(){return!!document[c.fullscreenElement]}},element:{enumerable:!0,get:function(){return document[c.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return!!document[c.fullscreenEnabled]}}}),document.addEventListener(c.fullscreenchange,function(a){d.onchange.call(d,a)}),document.addEventListener(c.fullscreenerror,function(a){d.onerror.call(d,a)}),void(a?module.exports=d:window.screenfull=d)):void(a?module.exports=!1:window.screenfull=!1)}();","if (!String.prototype.format) {\n  String.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/{(\\d+)}/g, function(match, number) {\n      return (typeof args[number] != 'undefined') ? args[number] : match;\n    });\n  };\n}\n\nif(typeof(String.prototype.trim) === \"undefined\")\n{\n    String.prototype.trim = function()\n    {\n        return String(this).replace(/^\\s+|\\s+$/g, '');\n    };\n}\n\nfunction is_array(x) {\n    return (Object.prototype.toString.call(x) === '[object Array]');\n}\n\nArray.prototype.equals = function (array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l=this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!this[i].equals(array[i]))\n                return false;\n        }\n        else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\nif (typeof String.prototype.startsWith != 'function') {\n  String.prototype.startsWith = function (str){\n    return this.slice(0, str.length) == str;\n  };\n}\n\nwindow.VISPY_DEBUG = false;\nfunction debug(msg) {\n    if (window.VISPY_DEBUG){\n        console.debug(msg);\n    }\n}\n\nmodule.exports = {debug: debug};\n","var VispyCanvas = require('./vispycanvas.js');\nvar gloo = require('./gloo.js');\nvar events = require('./events.js');\n\nvar Vispy = function() {\n    // Constructor of the Vispy library.\n    this.events = events;\n    this.gloo = gloo;\n    this._is_loop_running = false;\n    // List of canvases on the page.\n    this._canvases = [];\n};\n\nVispy.prototype.init = function(canvas_id) {\n    var canvas_el;\n    canvas_el = $(canvas_id);\n    // Initialize the canvas.\n    var canvas = new VispyCanvas(canvas_el);\n\n    canvas.deactivate_context_menu();\n\n    // Initialize events.\n    this.events.init(canvas);\n\n    // Initialize WebGL.\n    this.gloo.init(canvas);\n\n    // Register the canvas.\n    this.register(canvas);\n\n    return canvas;\n};\n\nVispy.prototype.register = function(canvas) {\n    /* Register a canvas. */\n    this._canvases.push(canvas);\n    // console.debug(\"Register canvas\", canvas);\n};\n\nVispy.prototype.unregister = function(canvas) {\n    /* Unregister a canvas. */\n    var index = this._canvases.indexOf(canvas);\n    if (index > -1) {\n        this._canvases.splice(index, 1);\n    }\n    // console.debug(\"Unregister canvas\", canvas);\n};\n\n\n/* Event loop */\nVispy.prototype.start_event_loop = function() {\n\n    // Do not start the event loop twice.\n    if (this._is_loop_running) return;\n\n    window.requestAnimFrame = (function(){\n          return  window.requestAnimationFrame       ||\n                  window.webkitRequestAnimationFrame ||\n                  window.mozRequestAnimationFrame    ||\n                  function(c){\n                    window.setTimeout(c, 1000.0 / 60.0);\n                  };\n    })();\n\n    // \"that\" is the current Vispy instance.\n    var that = this;\n    (function animloop() {\n        that._request_id = requestAnimFrame(animloop);\n        try {\n            // Call event_tick() on all active canvases.\n            for (var i = 0; i < that._canvases.length; i++) {\n                that._canvases[i].event_tick();\n            }\n        }\n        catch(err) {\n            that.stop_event_loop();\n            throw (err);\n        }\n    })();\n\n    this._is_loop_running = true;\n    console.debug(\"Event loop started.\");\n};\n\nVispy.prototype.stop_event_loop = function() {\n    window.cancelAnimationFrame(this._request_id);\n    this._is_loop_running = false;\n    console.debug(\"Event loop stopped.\");\n};\n\n\nmodule.exports = new Vispy();\n","\nvar VispyCanvas = function ($el) {\n    this.$el = $el;\n};\n\nmodule.exports = VispyCanvas;\n"]}