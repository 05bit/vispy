# -*- coding: utf-8 -*-
# Copyright (c) 2014, Vispy Development Team.
# Distributed under the (new) BSD License. See LICENSE.txt for more info.

"""
Normal components are modular shader components used for retrieving or
generating surface normal vectors.

These components generate a function in the fragment shader that accepts no
arguments and returns a vec4 normal vector. Typically, the normal vector
is computed in the vertex shader and passed by varying to the fragment 
shader.
"""

from __future__ import division

import numpy as np

from ..visual import VisualComponent
from ..shaders import Function
from ... import gloo



class TextureComponent(VisualComponent):
    """
    Component that reads a texture uniform.    
    """
    
    SHADERS = dict(
        frag_color="""
            vec4 $texture_read() {
                vec2 tex_coord = $texture_coordinate();
                if(tex_coord.x < 0.0 || tex_coord.x > 1.0 || 
                tex_coord.y < 0.0 || tex_coord.y > 1.0) {
                    discard;
                }
                return texture2D($texture, tex_coord.xy);            
            }
        """)
    
    def __init__(self, texture, tex_coord_comp):
        self.tex_coord_comp = tex_coord_comp
        self.texture = texture
        
    def activate(self, program, mode):
        # Texture coordinates are generated by a separate component.
        ff = self._funcs['frag_color']
        ff['texture_coordinate'] = self.tex_coord_comp.coord_shader()
        dd['texture'] = ('uniform', 'sampler2D', self.texture)
    
    
class VertexTextureCoordinateComponent(VisualComponent):
    """
    Class that reads texture coordinates from a vertex buffer.
    """
    SHADERS = dict(
        vert_post_hook="""
            void $texture_coord_support() {
                $tex_local_pos = local_pos;
            }
        """,
        frag_color="""
            vec2 $vertex_tex_coord() {
                vec4 tex_coord = map_local_to_tex($tex_local_pos));
                return $tex_coord.xy;
            }
        """)
    
    def __init__(self, transform):
        self.transform = transform
        
    def coord_shader(self):
        """
        Return the fragment shader function that returns a texture coordinate.
        """
        return self.frag_func
        
    def activate(self, program, mode):
        ff = self._funcs['frag_color']
        ff['tex_local_pos'] = ('varying', 'vec4')   
        self._funcs['vert_post_hook']['tex_local_pos'] = ff['tex_local_pos']



class TextureCoordinateComponent(VisualComponent):
    """
    Component that outputs texture coordinates derived from the local vertex 
    coordinate and a transform.    
    """
    
    SHADERS = dict(
        vert_post_hook="""
            void $texture_coord_support() {
                $tex_coord_output = $tex_coord;
            }
        """,
        frag_color="""
            vec2 $tex_coord() {
                return $tex_coord_input;
            }
        """)
    
    def __init__(self, coords):
        self.coords = coords
        
    def coord_shader(self):
        """
        Return the fragment shader function that returns a texture coordinate.
        """
        return self.frag_func
        
    @property
    def vbo(self):
        if self._vbo is None:
            self._vbo = gloo.VertexBuffer(self.coords)
        return self._vbo
        
    def activate(self, program, mode):
        vf = self._funcs['vert_post_hook']
        vf['tex_coord_output'] = ('varying', 'vec4')   
        self._funcs['frag_color']['tex_coord_input'] = vf['tex_coord_output']
        vf['tex_coord'] = ('attribute', 'vec2', self.vbo)

