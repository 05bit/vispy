{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/index.js","webpack:///./lib/vispy.min.js","webpack:///./lib/webgl-backend.js","webpack:///external \"@jupyter-widgets/base\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAuB;;AAEvB;AACA;AACA,2BAA2B,mBAAO,CAAC,kDAAoB;AACvD,4BAA4B,mBAAO,CAAC,uCAAiB;;;;;;;;;;;;ACZrD,qCAAa,GAAG,IAAsD,EAAE,mBAAmB,KAAK,UAA8N,CAAC,aAAa,0BAA0B,mBAAmB,kBAAkB,gBAAgB,UAAU,UAAU,0CAA0C,gBAAgB,OAAC,OAAO,oBAAoB,8CAA8C,kCAAkC,YAAY,YAAY,mCAAmC,iBAAiB,eAAe,sBAAsB,oBAAoB,kDAAkD,WAAW,YAAY,SAAS,SAAS,KAAK;AAC1zB;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC,GAAG;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA,kDAAkD;AAClD,oDAAoD;AACpD,iDAAiD;AACjD,kDAAkD;AAClD,kDAAkD;AAClD,qDAAqD;;AAErD,gDAAgD;AAChD,kDAAkD;;AAElD,iDAAiD;AACjD,6CAA6C;AAC7C,4CAA4C;AAC5C,iDAAiD;;;;AAIjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,cAAc;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B,EAAE;AAClD,CAAC;;;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA,KAAK;AACL;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,CAAC,EAAE,qBAAqB;AACxB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,kCAAkC;;AAElC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,EAAE;AAC9C;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B,EAAE;AAClD,CAAC;;;AAGD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;;AAEA;AACA,0BAA0B,EAAE;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,uBAAuB;;AAEvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA,0BAA0B;AAC1B,wBAAwB;AACxB,wBAAwB;AACxB,gCAAgC;AAChC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA,iCAAiC,EAAE;AACnC;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC,EAAE,OAAO,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE,OAAO,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gCAAgC,EAAE,gBAAgB,EAAE;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,EAAE,gBAAgB,EAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6BAA6B,EAAE,OAAO,EAAE,QAAQ,EAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC,EAAE,iBAAiB,EAAE;AACvD;AACA;AACA;AACA;AACA;;AAEA,kCAAkC,EAAE,gBAAgB,EAAE;AACtD;;AAEA;AACA;AACA;AACA;AACA,2DAA2D,EAAE;AAC7D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC,EAAE,gBAAgB,EAAE;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,EAAE,iBAAiB,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,EAAE,gBAAgB,EAAE,cAAc,EAAE;AACxE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,QAAQ,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,YAAY,EAAE;AACnF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC,EAAE,gBAAgB,EAAE;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sCAAsC,EAAE,gBAAgB,EAAE;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,EAAE,iBAAiB,EAAE;AACnE;AACA,KAAK;AACL;AACA,0BAA0B,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,EAAE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,EAAE;AAClE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC,EAAE;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,EAAE,EAAE,EAAE;;AAE1B;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,CAAC,EAAE,iDAAiD;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC,EAAE,mBAAmB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+GAA+G,aAAa,cAAc,oEAAoE,kVAAkV,oBAAoB,4CAA4C,eAAe,yBAAyB,4CAA4C,eAAe,+PAA+P,mCAAmC,qCAAqC,+LAA+L,aAAa,OAAO,gBAAgB,oEAAoE,iNAAiN,uCAAuC,EAAE,6CAA6C,kCAAkC,kCAAkC,4CAA4C,EAAE,oCAAoC,yBAAyB,wHAAwH,qBAAqB,+CAA+C,EAAE,uCAAuC,4BAA4B,wFAAwF,2BAA2B,gEAAgE,kGAAkG,2BAA2B,qBAAqB,WAAW,wCAAwC,aAAa,uBAAuB,8DAA8D,0BAA0B,oCAAoC,EAAE;AAC/iF,CAAC,GAAG;AACJ;AACA;AACA;AACA,oBAAoB;AACpB;AACA,YAAY,aAAa,8HAA8H,wtBAAwtB,IAAI,kCAAkC,mBAAmB,IAAI,oBAAoB,SAAS,SAAS,MAAM,oBAAoB,0BAA0B,0HAA0H,iBAAiB,6BAA6B,oBAAoB,8CAA8C,sBAAsB,qBAAqB,QAAQ,qCAAqC,cAAc,eAAe,uCAAuC,UAAU,6BAA6B,sCAAsC,UAAU,6BAA6B,wCAAwC,2DAA2D,qBAAqB,0DAA0D,oBAAoB,+FAA+F;AACryD,CAAC,GAAG;AACJ;AACA;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,KAAK,KAAK;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB,CAAC,GAAG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC,EAAE,8IAA8I;;AAEjJ;AACA;AACA;;AAEA;;AAEA,CAAC,GAAG,EAAE,GAAG;AACT,CAAC;;AAED,2CAA2C,cAAc;;;;;;;;;;;;;ACxsD5C;;AAEb,cAAc,mBAAO,CAAC,oDAAuB;AAC7C,YAAY,mBAAO,CAAC,0CAAgB;;AAEpC;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;;AAGL;AACA;AACA,E;;;;;;;;;;;;;;;;;;;;;;AC1JA,mE","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/index.js\");\n","// Entry point for the notebook bundle containing custom model definitions.\n//\n// Setup notebook base URL\n//\n// Some static assets may be required by the custom widget javascript. The base\n// url for the notebook is not known at build time and is therefore computed\n// dynamically.\n__webpack_public_path__ = document.querySelector('body').getAttribute('data-base-url') + 'nbextensions/vispy/';\n\n// Export widget models and views, and the npm package version number.\n// module.exports.vispy = require('./vispy.min.js');\nmodule.exports.VispyView = require('./webgl-backend.js').VispyView;\nmodule.exports['version'] = require('../package.json').version;\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.vispy = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nfunction decode_base64(base64) {\n    var binary_string =  window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i < len; i++)        {\n        var ascii = binary_string.charCodeAt(i);\n        bytes[i] = ascii;\n    }\n    return bytes.buffer;\n}\n\n// Mapping between user-friendly data type string, and typed array classes.\nvar _typed_array_map = {\n    'float32': Float32Array,\n    'int8': Int8Array,\n    'int16': Int16Array,\n    'int32': Int32Array,\n    'uint8': Uint8Array,\n    'uint16': Uint16Array,\n    'uint32': Uint32Array,\n};\n\n\nfunction to_array_buffer(data) {\n    // Return a TypedArray from a JSON object describing a data buffer.\n    // storage_type is one of 'javascript_array', 'javascript_typed_array',\n    // 'base64', 'png'\n    var storage_type = data[\"storage_type\"];\n\n    // data can also be just a normal typed array, in which case we just return\n    // the argument value.\n    if (storage_type == undefined) {\n        return data;\n    }\n\n    var data_type = data[\"data_type\"];\n    var contents = data[\"buffer\"];\n\n    if (storage_type == \"javascript_array\") {\n        // A regular JavaScript array, the type must be specified in 'data_type'.\n        return _typed_array_map[data_type](contents);\n    }\n    else if (storage_type == \"javascript_typed_array\" ||\n             storage_type == \"array_buffer\") {\n        // A JavaScript Typedarray.\n        return contents;\n    }\n    else if (storage_type == \"binary\") {\n        // \"binary\" means that binary WebSocket has been used\n        // A JavaScript ArrayBuffer referenced by the data view.\n        return contents.buffer;\n    }\n    else if (storage_type == \"base64\") {\n        var array = decode_base64(contents);\n        return array;\n    }\n}\n\nmodule.exports = {\n    to_array_buffer: to_array_buffer\n};\n\n},{}],2:[function(require,module,exports){\nvar VispyCanvas = require('./vispycanvas.js');\n\n/* Internal functions */\nfunction get_pos(c, e) {\n    var rect = c.getBoundingClientRect();\n    return [e.clientX - rect.left,\n            e.clientY - rect.top];\n}\n\nfunction normalize_pos(c, pos) {\n    return [2*pos[0]/c.width-1, 1-2*pos[1]/c.height];\n}\n\nfunction get_modifiers(e) {\n    var modifiers = [];\n    if (e.altKey) modifiers.push('alt');\n    if (e.ctrlKey) modifiers.push('ctrl');\n    if (e.metaKey) modifiers.push('meta');\n    if (e.shiftKey) modifiers.push('shift');\n    return modifiers;\n}\n\nfunction get_key_text(keynum) {\n    return String.fromCharCode(keynum).toUpperCase().trim();\n}\n\nfunction _get_keynum(e){\n    if(window.event){ // IE\n        return e.keyCode;\n    }\n    else if(e.which){ // Netscape/Firefox/Opera\n        return e.which;\n    }\n}\n\nvar _key_map = {\n    8: 'BACKSPACE',\n    9: 'TAB',\n    13: 'ENTER',\n    16: 'SHIFT',\n    17: 'CONTROL',\n    18: 'ALT',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    33: 'PAGEUP',\n    34: 'PAGEDOWN',\n    35: 'END',\n    36: 'HOME',\n    37: 'LEFT',\n    38: 'UP',\n    39: 'RIGHT',\n    40: 'DOWN',\n    45: 'INSERT',\n    46: 'DELETE',\n    91: 'META',\n    92: 'META',\n    96: '0',\n    97: '1',\n    98: '2',\n    99: '3',\n    100: '4',\n    101: '5',\n    102: '6',\n    103: '7',\n    104: '8',\n    105: '9',\n    106: '*',\n    107: '+',\n    109: '-',\n    110: '.',\n    111: '/',\n    112: 'F1',\n    113: 'F2',\n    114: 'F3',\n    115: 'F4',\n    116: 'F5',\n    117: 'F6',\n    118: 'F7',\n    119: 'F8',\n    120: 'F9',\n    121: 'F10',\n    122: 'F11',\n    123: 'F12',\n    186: ';',\n    187: '=',\n    188: ',',\n    189: '-',\n    190: '.',\n    191: '/',\n    192: '`',\n    219: '[',\n    220: '\\\\',\n    221: ']',\n    222: '\\'',\n};\nfunction get_key_code(e){\n    // Return a string representation of a key. It will be interpreted by\n    // Vispy.\n    var keynum = _get_keynum(e);\n    var key_code = _key_map[keynum];\n    if (key_code == undefined) {\n        key_code = get_key_text(keynum);\n    }\n    return key_code;\n}\n\n\n/* Event generation */\nvar _button_map = {\n    0: 1,   // left\n    2: 2,   // right\n    1: 3,   // middle\n};\nfunction gen_mouse_event(c, e, type) {\n    if (c._eventinfo.is_button_pressed)\n        var button = _button_map[e.button];\n    else\n        button = null;\n    var pos = get_pos(c.$el.get(0), e);\n    var modifiers = get_modifiers(e);\n    var press_event = c._eventinfo.press_event;\n    var last_event = c._eventinfo.last_event;\n    var event = {\n        'type': type,\n        'pos': pos,\n        'button': button,\n        'is_dragging': press_event != null,\n        'modifiers': modifiers,\n        'delta': null,\n        'press_event': press_event,\n\n        'last_event': null,  // HACK: disabled to avoid recursion problems\n    }\n    return event;\n}\n\nfunction gen_resize_event(c, size) {\n    var event = {\n        'type': 'resize',\n        'size': size,\n    }\n    return event;\n}\n\nfunction gen_paint_event(c) {\n    var event = {\n        'type': 'paint',\n    }\n    return event;\n}\n\nfunction gen_initialize_event(c) {\n    var event = {\n        'type': 'initialize',\n    }\n    return event;\n}\n\nfunction gen_key_event(c, e, type) {\n    var modifiers = get_modifiers(e);\n    var last_event = c._eventinfo.last_event;\n    var event = {\n        'type': type,\n        'modifiers': modifiers,\n        'key_code': get_key_code(e),\n        'last_event': null,  // HACK: disabled to avoid recursion problems\n    }\n    return event;\n}\n\n\n\n/* Internal callback functions */\nVispyCanvas.prototype._mouse_press = function(e) { };\nVispyCanvas.prototype._mouse_release = function(e) { };\nVispyCanvas.prototype._mouse_move = function(e) { };\nVispyCanvas.prototype._mouse_wheel = function(e) { };\nVispyCanvas.prototype._mouse_click = function(e) { };\nVispyCanvas.prototype._mouse_dblclick = function(e) { };\n\nVispyCanvas.prototype._key_press = function(e) { };\nVispyCanvas.prototype._key_release = function(e) { };\n\nVispyCanvas.prototype._initialize = function(e) { };\nVispyCanvas.prototype._resize = function(e) { };\nVispyCanvas.prototype._paint = function(e) { };\nVispyCanvas.prototype._event_tick = function(e) { };\n\n\n\n/* Registering handlers */\nVispyCanvas.prototype.on_mouse_press = function(f) {\n    this._mouse_press = f;\n};\nVispyCanvas.prototype.on_mouse_release = function(f) {\n    this._mouse_release = f;\n};\nVispyCanvas.prototype.on_mouse_move = function(f) {\n    this._mouse_move = f;\n};\nVispyCanvas.prototype.on_mouse_wheel = function(f) {\n    this._mouse_wheel = f;\n};\nVispyCanvas.prototype.on_mouse_dblclick = function(f) {\n    this._mouse_dblclick = f;\n};\nVispyCanvas.prototype.on_key_press = function(f) {\n    this._key_press = f;\n};\nVispyCanvas.prototype.on_key_release = function(f) {\n    this._key_release = f;\n};\nVispyCanvas.prototype.on_initialize = function(f) {\n    this._initialize = f;\n};\nVispyCanvas.prototype.on_resize = function(f) {\n    this._resize = f;\n};\nVispyCanvas.prototype.on_paint = function(f) {\n    this._paint = f;\n};\nVispyCanvas.prototype.on_event_tick = function(f) {\n    this._event_tick = f;\n};\n\n\nVispyCanvas.prototype.initialize = function() {\n    var event = gen_initialize_event(this);\n    this._set_size();\n    this._initialize(event);\n};\nVispyCanvas.prototype._set_size = function(size) {\n    if (size == undefined) {\n        size = [this.$el.width(), this.$el.height()];\n    }\n    this.size = size;\n    this.width = size[0];\n    this.height = size[1];\n    return size;\n}\nVispyCanvas.prototype.paint = function() {\n    /* Add a paint event in the event queue. */\n    var event = gen_paint_event(this);\n    this.event_queue.append(event);\n};\nVispyCanvas.prototype.update = VispyCanvas.prototype.paint;\nVispyCanvas.prototype.resize = function(size) {\n    size = this._set_size(size);\n    var event = gen_resize_event(this, size);\n    this.gl.canvas.width = size[0];\n    this.gl.canvas.height = size[1];\n    // Put the resize event in the queue.\n    this.event_queue.append(event);\n    this._resize(event);\n};\n\nVispyCanvas.prototype.event_tick = function() {\n    this._event_tick();\n    var ncommands = this.execute_pending_commands();\n    if (ncommands > 0) {\n        // At least 1 GLIR command has been executed here.\n        // We call the on_paint callback function here.\n        var event = gen_paint_event(this);\n        this._paint(event);\n    }\n};\n\nVispyCanvas.prototype.is_fullscreen = function() {\n    return (screenfull.enabled) & (screenfull.isFullscreen);\n};\n\nVispyCanvas.prototype.toggle_fullscreen = function() {\n    if (screenfull.enabled) {\n        if(screenfull.isFullscreen) {\n            screenfull.exit();\n            this.resize(this._size);\n        }\n        else {\n            this.$el.width(\"100%\").height(\"100%\");\n            this._size = [this.$el.width(), this.$el.height()];\n            screenfull.request(this.$el[0]);\n            this.resize([screen.width, screen.height]);\n        }\n    }\n};\n\nVispyCanvas.prototype.deactivate_context_menu = function() {\n    document.oncontextmenu = function () { return false; };\n}\n\nVispyCanvas.prototype.resizable = function() {\n    var that = this;\n    this.$el.resizable({\n        resize: function(event, ui) {\n            that.resize([ui.size.width, ui.size.height]);\n        }\n    });\n};\n\n\n/* Event queue prototype */\nfunction _events_can_be_combined(e1, e2) {\n    // Return the list of properties to copy to e2.\n    // The returned list is non empty if the two events can be combined.\n    // It is empty if the two events cannot be combined.\n    var type = e1.type;\n    if (type == e2.type) {\n        if (type == 'mouse_move') {\n            if ((e1.button == e2.button) &\n                (e1.is_dragging == e2.is_dragging) &\n                (e1.modifiers.equals(e2.modifiers))) {\n                return ['pos'];\n            }\n        }\n        else {\n\n        }\n    }\n    return [];\n}\nfunction EventQueue(maxlen) {\n    if (maxlen == undefined) {\n        maxlen = 100;\n    }\n    this._queue = [];\n    this.maxlen = maxlen;\n}\nEventQueue.prototype.clear = function() {\n    this._queue = [];\n}\nEventQueue.prototype.append = function(e, compress) {\n    // Compression allows several similar consecutive events to be merged\n    // into a single event, for performance reasons (notably, 'mouse_move').\n    var add_to_queue = true;\n    if (compress == undefined) {\n        compress = true;\n    }\n    if (compress) {\n        // If the event type is identical to the last event, we\n        // just update the parameters instead of pushing a new event.\n        var last_event = this._queue[this._queue.length - 1];\n        if (last_event != undefined) {\n            // Get the list or properties to combine.\n            var props = _events_can_be_combined(e, last_event);\n            // Combine the properties.\n            if (props.length > 0) {\n                for (var i = 0; i < props.length; i++) {\n                    var prop = props[i];\n                    this._queue[this._queue.length - 1][prop] = e[prop];\n                }\n                // In this case, no need to add the new event to the queue\n                // because the last existing event can be updated (\"combined\"\n                // with the new one).\n                add_to_queue = false;\n            }\n        }\n    }\n    if (add_to_queue) {\n        this._queue.push(e);\n    }\n    // Remove the oldest element if the queue is longer than the maximum allowed side.\n    if (this._queue.length > this.maxlen) {\n        this._queue.shift();\n        // Remove the reference to the removed event in order to clean the GC.\n        this._queue[0].last_event = null;\n    }\n}\nEventQueue.prototype.get = function() {\n    return this._queue;\n}\nObject.defineProperty(EventQueue.prototype, \"length\", {\n    get: function() { return this._queue.length; },\n});\n\n\n/* Canvas initialization */\nfunction init_app(c) {\n\n    // Generate a resize event when the user resizes the canvas with\n    // jQuery resizable.\n    c.$el.resize(function(e) {\n            c.resize([e.width(), e.height()]);\n        }\n    );\n\n    c.event_queue = new EventQueue();\n\n    // This object stores some state necessary to generate the appropriate\n    // events.\n    c._eventinfo = {\n        'type': null,\n        'pos': null,\n        'button': null,\n        'is_dragging': null,\n        'key': null,\n        'modifiers': [],\n        'press_event': null,\n        'last_event': null,\n        'delta': null,\n    }\n\n    // HACK: boolean stating whether a mouse button is pressed.\n    // This is necessary because e.button==0 in two cases: no\n    // button is pressed, or the left button is pressed.\n    c._eventinfo.is_button_pressed = 0;\n\n    c.$el.mousemove(function(e) {\n        var event = gen_mouse_event(c, e, 'mouse_move');\n\n        // Vispy callbacks.\n        c._mouse_move(event);\n\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.mousedown(function(e) {\n        ++c._eventinfo.is_button_pressed;\n        var event = gen_mouse_event(c, e, 'mouse_press');\n\n        // Vispy callbacks.\n        c._mouse_press(event);\n\n        // Save the last press event.\n        c._eventinfo.press_event = event;\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.mouseup(function(e) {\n        --c._eventinfo.is_button_pressed;\n        var event = gen_mouse_event(c, e, 'mouse_release');\n\n        // Vispy callbacks.\n        c._mouse_release(event);\n\n        // Reset the last press event.\n        c._eventinfo.press_event = null;\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.click(function(e) {\n        // Reset the last press event.\n        c._eventinfo.press_event = null;\n    });\n    c.$el.dblclick(function(e) {\n\n        // Reset the last press event.\n        c._eventinfo.press_event = null;\n    });\n    // This requires the mouse wheel jquery plugin.\n    if (c.$el.mousewheel != undefined) {\n        c.$el.mousewheel(function(e) {\n            var event = gen_mouse_event(c, e, 'mouse_wheel');\n            event.delta = [e.deltaX * e.deltaFactor * .01,\n                           e.deltaY * e.deltaFactor * .01];\n\n            // Vispy callbacks.\n            c._mouse_wheel(event);\n\n            // Save the last event.\n            // c._eventinfo.last_event = event;\n            c.event_queue.append(event);\n\n            e.preventDefault();\n            e.stopPropagation();\n        });\n    }\n\n    c.$el.keydown(function(e) {\n        var event = gen_key_event(c, e, 'key_press');\n\n        // Vispy callbacks.\n        c._key_press(event);\n\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n    c.$el.keyup(function(e) {\n        var event = gen_key_event(c, e, 'key_release');\n\n        // Vispy callbacks.\n        c._key_release(event);\n\n        // Save the last event.\n        // c._eventinfo.last_event = event;\n        c.event_queue.append(event);\n    });\n\n    c.$el.mouseout(function(e) {\n    });\n}\n\n\n/* Creation of vispy.events */\nvar events = function() {\n    // Constructor.\n\n};\n\nevents.prototype.init = function(c) {\n    init_app(c);\n};\n\nmodule.exports = new events();\n\n},{\"./vispycanvas.js\":9}],3:[function(require,module,exports){\nvar VispyCanvas = require('./vispycanvas.js');\nvar util = require('./util.js');\nvar data = require('./data.js');\n\nvar debug = util.debug;\nvar to_array_buffer = data.to_array_buffer;\nvar JUST_DELETED = 'JUST_DELETED';\n\n/* WebGL utility functions */\nfunction viewport(c) {\n    c.gl.viewport(0, 0, c.width(), c.height());\n}\n\nfunction clear(c, color) {\n    c.gl.clearColor(color[0], color[1], color[2], color[3]);\n    c.gl.clear(c.gl.COLOR_BUFFER_BIT);\n}\n\nfunction compile_shader(c, shader, source) {\n    // TODO: Convert desktop GLSL code if needed\n    console.log(typeof source);\n    if (typeof source !== 'string') {\n        // assume we have a buffer\n        source = String.fromCharCode.apply(null, new Uint8Array(source));\n\n    }\n    source = source.replace(/\\\\n/g, \"\\n\");\n\n    c.gl.shaderSource(shader, source);\n    c.gl.compileShader(shader);\n\n    if (!c.gl.getShaderParameter(shader, c.gl.COMPILE_STATUS))\n    {\n        console.error(c.gl.getShaderInfoLog(shader));\n        return false;\n    }\n\n    return true;\n}\n\nfunction create_attribute(c, program, name) {\n    var attribute_handle = c.gl.getAttribLocation(program, name);\n    return attribute_handle;\n}\n\nfunction activate_attribute(c, attribute_handle, vbo_id, type, stride, offset) {\n    // attribute_handle: attribute handle\n    // vbo_id\n    // type: float, vec3, etc.\n    // stride: 0 by default\n    // offset: 0 by default\n    var _attribute_info = get_attribute_info(type);\n    var attribute_type = _attribute_info[0];  // FLOAT, INT or BOOL\n    var ndim = _attribute_info[1]; // 1, 2, 3 or 4\n\n    _vbo_info = c._ns[vbo_id];\n    var vbo_handle = _vbo_info.handle;\n\n    c.gl.enableVertexAttribArray(attribute_handle);\n    c.gl.bindBuffer(c.gl.ARRAY_BUFFER, vbo_handle);\n    c.gl.vertexAttribPointer(attribute_handle, ndim,\n                             c.gl[attribute_type],\n                             false, stride, offset);\n}\n\nfunction deactivate_attribute(c, attribute_handle) {\n    // c.gl.bindBuffer(c.gl.GL_ARRAY_BUFFER, 0);\n    c.gl.disableVertexAttribArray(attribute_handle);\n}\n\nfunction activate_texture(c, texture_handle, sampler_handle, texture_index) {\n    if (texture_handle === JUST_DELETED) {\n        return;\n    }\n    c.gl.activeTexture(c.gl.TEXTURE0 + texture_index);\n    c.gl.bindTexture(c.gl.TEXTURE_2D, texture_handle);\n    // c.gl.uniform1i(sampler_handle, 0);\n}\n\nfunction deactivate_texture(c, texture_handle, sampler_handle, texture_index) {\n    c.gl.activeTexture(c.gl.TEXTURE0 + texture_index);\n    c.gl.bindTexture(c.gl.TEXTURE_2D, null);\n}\n\nfunction _get_alignment(width) {\n    /* Determines a textures byte alignment.\n\n    If the width isn't a power of 2\n    we need to adjust the byte alignment of the image.\n    The image height is unimportant\n\n    www.opengl.org/wiki/Common_Mistakes#Texture_upload_and_pixel_reads\n\n    we know the alignment is appropriate\n    if we can divide the width by the\n    alignment cleanly\n    valid alignments are 1,2,4 and 8\n    4 is the default\n\n    */\n    var alignments = [8, 4, 2, 1];\n    for (var i = 0; i < alignments.length; i++) {\n        if (width % alignments[i] == 0) {\n            return alignments[i];\n        }\n    }\n}\n\nfunction set_texture_data(c, object_handle, gl_type, format, width, height, array, offset, shape, dtype) {\n    c.gl.bindTexture(gl_type, object_handle);\n\n    // TODO: choose a better alignment\n    c.gl.pixelStorei(c.gl.UNPACK_ALIGNMENT, 1);\n\n    if (array === null) {\n        // special texture attached to frame buffer to be rendered to\n        c.gl.texImage2D(gl_type, 0, format, width, height, 0, format, c.gl.UNSIGNED_BYTE, array);\n    } else if (array.getContext) {\n        // A canvas object\n        c.gl.texImage2D(gl_type, 0, c.gl.RGBA, c.gl.RGBA, c.gl.UNSIGNED_BYTE, array);\n    } else if (array.canvas) {\n        // A context object\n        c.gl.texImage2D(gl_type, 0, c.gl.RGBA, c.gl.RGBA, c.gl.UNSIGNED_BYTE, array.canvas);\n    } else {\n        var array_view;\n        if (dtype == c.gl.FLOAT) {\n            array_view = new Float32Array(array);\n        } else {\n            array_view = new Uint8Array(array);\n        }\n\n        // if this isn't initializing the texture (texImage2D) then see if we\n        // can set just part of the texture\n        if (offset && shape && ((shape[0] !== height) || (shape[1] !== width))) {\n            var width = shape[shape.length - 2] * shape[shape.length - 1];\n            var alignment = _get_alignment(width);\n            c.gl.pixelStorei(c.gl.UNPACK_ALIGNMENT, alignment);\n            c.gl.texSubImage2D(gl_type, 0, offset[1], offset[0],\n                shape[1], shape[0], format, dtype, array_view);\n        } else {\n            c.gl.pixelStorei(c.gl.UNPACK_ALIGNMENT, 1);\n            c.gl.texImage2D(gl_type, 0, format, width, height, 0,\n                format, dtype, array_view);\n        }\n    }\n}\n\nfunction set_buffer_data(c, object_handle, gl_type, offset, array, reuse) {\n    // Bind the buffer before setting the data.\n    c.gl.bindBuffer(gl_type, object_handle);\n\n    // Upload the data.\n    if (!reuse) {\n        // The existing buffer was empty: we create it.\n        c.gl.bufferData(gl_type, array, c.gl.STATIC_DRAW);\n    }\n    else {\n        // We reuse the existing buffer.\n        c.gl.bufferSubData(gl_type, offset, array);\n    }\n}\n\nfunction set_uniform(c, uniform_handle, uniform_function, value) {\n    // Get a TypedArray.\n    array = to_array_buffer(value);\n\n    if (uniform_function.indexOf('Matrix') > 0) {\n        // Matrix uniforms.\n        c.gl[uniform_function](uniform_handle, false, array);\n    }\n    else {\n        // Scalar uniforms.\n        c.gl[uniform_function](uniform_handle, array);\n    }\n}\n\nvar _dtype_to_gl_dtype = {\n    'float32': 'FLOAT',\n    'uint8': 'UNSIGNED_BYTE',\n};\nfunction get_gl_dtype(dtype) {\n    return _dtype_to_gl_dtype[dtype];\n}\n\nvar _attribute_type_map = {\n    'float': ['FLOAT', 1],\n    'vec2': ['FLOAT', 2],\n    'vec3': ['FLOAT', 3],\n    'vec4': ['FLOAT', 4],\n\n    'int': ['INT', 1],\n    'ivec2': ['INT', 2],\n    'ivec3': ['INT', 3],\n    'ivec4': ['INT', 4],\n};\nfunction get_attribute_info(type) {\n    // type: vec2, ivec3, float, etc.\n    return _attribute_type_map[type];\n}\n\nvar _uniform_type_map = {\n    'float': 'uniform1fv',\n    'vec2': 'uniform2fv',\n    'vec3': 'uniform3fv',\n    'vec4': 'uniform4fv',\n\n    'int': 'uniform1iv',\n    'ivec2': 'uniform2iv',\n    'ivec3': 'uniform3iv',\n    'ivec4': 'uniform4iv',\n\n    'mat2': 'uniformMatrix2fv',\n    'mat3': 'uniformMatrix3fv',\n    'mat4': 'uniformMatrix4fv',\n};\nfunction get_uniform_function(type) {\n    // Find OpenGL uniform function.\n    return _uniform_type_map[type];\n}\n\nvar _gl_type_map = {\n    VertexBuffer: 'ARRAY_BUFFER',\n    IndexBuffer: 'ELEMENT_ARRAY_BUFFER',\n    Texture2D: 'TEXTURE_2D',\n};\n\nfunction get_gl_type(object_type) {\n    return _gl_type_map[object_type];\n}\n\nvar _gl_attachment_map = {\n    'color': ['COLOR_ATTACHMENT0', 'RGBA4'],\n    'depth': ['DEPTH_ATTACHMENT', 'DEPTH_COMPONENT16'],\n    'stencil': ['STENCIL_ATTACHMENT', 'STENCIL_INDEX8'],\n};\n\nfunction get_attachment_type(type_str) {\n    return _gl_attachment_map[type_str][0];\n}\n\nfunction get_attachment_format(type_str) {\n    return _gl_attachment_map[type_str][1];\n}\n\nfunction parse_enum(c, str) {\n    // Parse an enum or combination of enums stored in a string.\n    var strs = str.split('|');\n    var value = 0;\n    for (var i = 0; i < strs.length; i++) {\n        var name = strs[i].toUpperCase().trim();\n        value = value | c.gl[name];\n    }\n    return value;\n}\n\nfunction validate_framebuffer(c) {\n    var status = c.gl.checkFramebufferStatus(c.gl.FRAMEBUFFER);\n    if (status == c.gl.FRAMEBUFFER_COMPLETE) {\n        return;\n    }\n    // c.gl.FRAMEBUFFER_INCOMPLETE_FORMATS: // not in es 2.0\n    //     'Internal format of attachment is not renderable.'\n    if (status == c.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT) {\n        throw 'FrameBuffer attachments are incomplete.';\n    }\n    else if (status == c.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT) {\n        throw 'No valid attachments in the FrameBuffer.';\n    }\n    else if (status == c.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS) {\n        throw 'attachments do not have the same width and height.';\n    }\n    else if (status == c.gl.FRAMEBUFFER_UNSUPPORTED) {\n        throw 'Combination of internal formats used by attachments is not supported.';\n    }\n    else {\n        throw 'Unknown framebuffer error' + status;\n    }\n}\n\nfunction activate_framebuffer(c, framebuffer_id) {\n    var fb = c._ns[framebuffer_id];\n    var stack = c.env.fb_stack;\n    if (stack.length == 0) {\n        stack.push(null);\n    }\n\n    if (stack[stack.length - 1] === fb.handle) {\n        debug(\"Frame buffer already active {0}\".format(framebuffer_id));\n        return;\n    }\n    debug(\"Binding frame buffer {0}.\".format(framebuffer_id));\n    c.gl.bindFramebuffer(c.gl.FRAMEBUFFER, fb.handle);\n    stack.push(fb.handle);\n}\n\nfunction deactivate_framebuffer(c, framebuffer_id) {\n    var fb = c._ns[framebuffer_id];\n    var stack = c.env.fb_stack;\n    if (stack.length == 0) {\n        stack.push(null);\n    }\n\n    while (stack[stack.length - 1] === fb.handle) {\n        // Deactivate current frame buffer\n        stack.pop(); // 'unbind' current buffer\n    }\n    // Activate previous frame buffer\n    // NOTE: out of bounds index if trying to unbind the default (null) framebuffer\n    debug(\"Binding previous frame buffer\");\n    c.gl.bindFramebuffer(c.gl.FRAMEBUFFER, stack[stack.length - 1]);\n}\n\nfunction init_env_cache(c) {\n    c.env = {\n        'fb_stack': [],\n    };\n}\n\n\n/* Glir queue prototype */\nfunction GlirQueue() {\n    this._queue = [];\n}\nGlirQueue.prototype.clear = function() {\n    this._queue = [];\n};\nGlirQueue.prototype.append = function(e) {\n    this._queue.push(e);\n};\nGlirQueue.prototype.append_multi = function(es) {\n    for (var i = 0; i < es.length; i++) {\n        this._queue.push(es[i]);\n    }\n};\nGlirQueue.prototype.get = function() {\n    return this._queue;\n};\nObject.defineProperty(GlirQueue.prototype, \"length\", {\n    get: function() { return this._queue.length; },\n});\n\n\n/* Vispy canvas GLIR methods */\nVispyCanvas.prototype.set_deferred = function(deferred) {\n    this._deferred = deferred;\n};\n\nVispyCanvas.prototype.execute_pending_commands = function() {\n    /* Return the number of executed GLIR commands. */\n    var q = this.glir_queue.get();\n    var execute_up_to = -1;\n    if (q.length == 0) {\n        return 0;\n    }\n\n    // Only start executing if we see a SWAP command\n    // Any 'draw' command (clear, draw, etc) will cause the browser to\n    // swap the webgl drawing buffers. If we start executing draw commands\n    // before we are ready for the buffers to swap we could get an incomplete\n    // canvas (only 'clear' being completed, less than all of the\n    // expected objects being drawn, etc).\n    // This technically only happens if not all the GLIR commands were\n    // received by the time this animation loop started.\n    for (var i = 0; i < q.length; i++) {\n        if (q[i][0] === 'SWAP') {\n            execute_up_to = i;\n            break;\n        }\n    }\n    // Execute all commands up to and including the SWAP\n    for (i = 0; i <= execute_up_to; i++) {\n        this.command(q[i], false);\n    }\n\n    if (execute_up_to >= 0) {\n        debug(\"Processed {0} events.\".format(execute_up_to + 1));\n        // this.glir_queue.clear();\n        this.glir_queue._queue = this.glir_queue._queue.slice(execute_up_to + 1);\n    }\n    return execute_up_to + 1;\n};\n\nVispyCanvas.prototype.command = function(command, deferred) {\n    if (deferred === undefined) {\n        deferred = this._deferred;\n    }\n    var method = command[0].toLowerCase();\n    if (deferred) {\n        this.glir_queue.append(command);\n    }\n    else {\n        this.glir[method](this, command.slice(1));\n    }\n};\n\n\n/* Creation of vispy.gloo.glir */\nvar glir = function() { };\n\nglir.prototype.init = function(c) {\n    // Namespace with the table of all symbols used by GLIR.\n\n    // The key is user-specified and is named the **id**.\n    // The WebGL internal handle is called the **handle**.\n\n    // For each id key, the value is an object with the following properties:\n    // * object_type ('VertexBuffer', 'Program', etc.)\n    // * handle (the WebGL internal handle, for all objects)\n    // * data_type (for Buffers)\n    // * offset (for Buffers)\n    // * attributes (for Programs)\n    // * uniforms (for Programs)\n    c._ns = {};\n    // Deferred mode is enabled by default.\n    c._deferred = true;\n    // Per-context storage for GLIR objects (framebuffer stack, etc)\n    init_env_cache(c);\n    c.glir_queue = new GlirQueue();\n    c.glir = this;\n};\n\nglir.prototype.current = function(c, args) {\n    init_env_cache(c);\n    c.gl.bindFramebuffer(c.gl.FRAMEBUFFER, null);\n};\n\nglir.prototype.swap = function(c, args) {\n\n};\n\nglir.prototype.create = function(c, args) {\n    var id = args[0];\n    var cls = args[1];\n    if (cls == 'VertexBuffer') {\n        debug(\"Creating vertex buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createBuffer(),\n            size: 0,  // current size of the buffer\n        };\n    }\n    else if (cls == 'IndexBuffer') {\n        debug(\"Creating index buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createBuffer(),\n            size: 0,  // current size of the buffer\n        };\n    }\n    else if (cls == 'FrameBuffer') {\n        debug(\"Creating frame buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createFramebuffer(),\n            size: 0,  // current size of the buffer\n            validated: false,\n        };\n    }\n    else if (cls == 'RenderBuffer') {\n        debug(\"Creating render buffer '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createRenderbuffer(),\n            size: 0,  // current size of the buffer\n        };\n    }\n    else if (cls == 'Texture2D') {\n        debug(\"Creating texture '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createTexture(),\n            size: 0,  // current size of the texture\n            shape: [],\n        };\n    }\n    else if (cls == 'Program') {\n        debug(\"Creating program '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createProgram(),\n            attributes: {},\n            uniforms: {},\n            textures: {}, // map texture_id -> sampler_name, sampler_handle, number, handle\n            texture_uniforms: {}, // map sampler_name -> texture_id\n        };\n    }\n    else if (cls == 'VertexShader') {\n        debug(\"Creating VertexShader '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createShader(c.gl['VERTEX_SHADER']),\n        };\n    }\n    else if (cls == 'FragmentShader') {\n        debug(\"Creating FragmentShader '{0}'.\".format(id));\n        c._ns[id] = {\n            object_type: cls,\n            handle: c.gl.createShader(c.gl['FRAGMENT_SHADER']),\n        };\n    }\n};\n\nglir.prototype.delete = function(c, args) {\n    var id = args[0];\n    var cls = c._ns[id].object_type;\n    var handle = c._ns[id].handle;\n    c._ns[id].handle = JUST_DELETED;\n    if (cls == 'VertexBuffer') {\n        debug(\"Deleting vertex buffer '{0}'.\".format(id));\n        c.gl.deleteBuffer(handle);\n    }\n    else if (cls == 'IndexBuffer') {\n        debug(\"Deleting index buffer '{0}'.\".format(id));\n        c.gl.deleteBuffer(handle);\n    }\n    else if (cls == 'FrameBuffer') {\n        debug(\"Deleting frame buffer '{0}'.\".format(id));\n        c.gl.deleteFramebuffer(handle);\n    }\n    else if (cls == 'RenderBuffer') {\n        debug(\"Deleting render buffer '{0}'.\".format(id));\n        c.gl.deleteRenderbuffer(handle);\n    }\n    else if (cls == 'Texture2D') {\n        debug(\"Deleting texture '{0}'.\".format(id));\n        c.gl.deleteTexture(handle);\n    }\n    else if (cls == 'Program') {\n        debug(\"Deleting program '{0}'.\".format(id));\n        c.gl.deleteProgram(handle);\n    }\n    else if (cls.indexOf('Shader') >= 0) {\n        debug(\"Deleting shader '{0}'.\".format(id));\n        c.gl.deleteShader(handle);\n    }\n};\n\nglir.prototype.size = function(c, args) {\n    var object_id = args[0];\n    var size = args[1];  // WARNING: size must be in bytes!\n    var format = args[2];\n    var object = c._ns[object_id];\n    var object_handle = object.handle;\n    var object_type = object.object_type;\n    var gl_type = c.gl[get_gl_type(object_type)];\n\n    // Textures.\n    if (object_type.indexOf('Texture') >= 0) {\n        // format is 'LUMINANCE', 'ALPHA', 'LUMINANCE_ALPHA', 'RGB' or 'RGBA'\n        object.format = format.toUpperCase();\n        debug(\"Setting texture size to {1} for '{0}'.\".format(object_id, size));\n        // HACK: it doesn't seem we can change the texture size without\n        // allocating a buffer in WebGL, so we just store the size and\n        // format in the object, and we'll use this information in the\n        // subsequent DATA call.\n    }\n    else if (object_type == 'RenderBuffer') {\n        c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, object_handle);\n        object.format = c.gl[get_attachment_format(format)];\n        // size is Y, X, Z\n        // assume Y is rows (height), X is columns (width)\n        // assume Z is color information (ignored)\n        c.gl.renderbufferStorage(c.gl.RENDERBUFFER, object.format, size[1], size[0]);\n        c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, null);\n    }\n    // Buffers\n    else\n    {\n        debug(\"Setting buffer size to {1} for '{0}'.\".format(object_id, size));\n        // Reuse the buffer if the existing size is not null.\n        set_buffer_data(c, object_handle, gl_type, 0, size, false);\n    }\n    // Save the size.\n    object.size = size;\n};\n\nglir.prototype.data = function(c, args) {\n    var object_id = args[0];\n    var offset = args[1];\n    var data = args[2];\n    var object = c._ns[object_id];\n    var object_type = object.object_type; // VertexBuffer, IndexBuffer, or Texture2D\n    var object_handle = object.handle;\n    var gl_type = c.gl[get_gl_type(object_type)];\n    // Get a TypedArray.\n    var array = to_array_buffer(data);\n\n    if (object_type.indexOf('Shader') >= 0) {\n        // Compile shader code to shader object\n        compile_shader(c, object_handle, array);\n    }\n    // Textures.\n    else if (object_type.indexOf('Texture') >= 0) {\n        // The texture shape was specified in SIZE\n        var shape = object.size;\n        // WARNING: this is height and then width, not the other way\n        // around.\n        var height = shape[0];\n        var width = shape[1];\n\n        // The texture format was specified in SIZE.\n        var format = c.gl[object.format];\n\n        debug(\"Setting texture data for '{0}'.\".format(object_id));\n        // `data.shape` comes from notebook backend and vispy webgl extension\n        // without it, subimage texture writes do not work\n        var gl_dtype = c.gl[get_gl_dtype(data.dtype)];\n        set_texture_data(c, object_handle, gl_type, format, width, height, array, offset, data.shape, gl_dtype);\n        object.shape = shape;\n    }\n    // Buffers\n    else\n    {\n        debug(\"Setting buffer data for '{0}'.\".format(object_id));\n        // Reuse the buffer if the existing size is not null.\n        set_buffer_data(c, object_handle, gl_type, offset, array, object.size > 0);\n        object.size = array.byteLength;\n    }\n};\n\nglir.prototype.attribute = function(c, args) {\n    var program_id = args[0];\n    var name = args[1];\n    var type = args[2];\n    // TODO: support non-VBO data\n    var vbo_id = args[3][0];\n    var stride = args[3][1];\n    var offset = args[3][2];\n\n    var program_handle = c._ns[program_id].handle;\n\n    debug(\"Creating attribute '{0}' for program '{1}'.\".format(\n            name, program_id\n        ));\n    var attribute_handle = create_attribute(c, program_handle, name);\n\n    // Store the attribute handle in the attributes array of the program.\n    c._ns[program_id].attributes[name] = {\n        handle: attribute_handle,\n        type: type,\n        vbo_id: vbo_id,\n        stride: stride,\n        offset: offset,\n    };\n};\n\nglir.prototype.uniform = function(c, args) {\n    var program_id = args[0];\n    var name = args[1];\n    var type = args[2];\n    var value = args[3];\n\n    var program_handle = c._ns[program_id].handle;\n\n    c.gl.useProgram(program_handle);\n\n    // Check the cache.\n    if (c._ns[program_id].uniforms[name] == undefined) {\n        // If necessary, we create the uniform and cache both its handle and\n        // GL function.\n        debug(\"Creating uniform '{0}' for program '{1}'.\".format(\n                name, program_id\n            ));\n        var uniform_handle = c.gl.getUniformLocation(program_handle, name);\n        var uniform_function = get_uniform_function(type);\n        // We cache the uniform handle and the uniform function name as well.\n        c._ns[program_id].uniforms[name] = [uniform_handle, uniform_function];\n    }\n\n    debug(\"Setting uniform '{0}' to '{1}' with {2} elements.\".format(\n            name, value, value.length\n        ));\n    var uniform_info = c._ns[program_id].uniforms[name];\n    var uniform_handle = uniform_info[0];\n    var uniform_function = uniform_info[1];\n    set_uniform(c, uniform_handle, uniform_function, value);\n};\n\nglir.prototype.texture = function(c, args) {\n    var program_id = args[0];\n    var sampler_name = args[1];\n    var texture_id = args[2];\n\n    var program = c._ns[program_id];\n    var program_handle = program.handle;\n    var texture_handle = c._ns[texture_id].handle;\n\n    if (texture_handle === JUST_DELETED) {\n        debug(\"Removing texture '{0}' from program '{1}'\".format(\n            texture_id, program_id\n        ));\n        delete program.textures[texture_id];\n        return;\n    }\n\n    debug(\"Initializing texture '{0}' for program '{1}'.\".format(\n        texture_id, program_id));\n\n    // FIXME: Probably should store textures by sampler name, not texture id\n    if (program.texture_uniforms.hasOwnProperty(sampler_name)) {\n        // This program has had this sampler uniform name set before\n        // Let's remove the old one\n        debug('Removing previously assigned texture for \\'{0}\\''.format(sampler_name))\n        delete program.textures[program.texture_uniforms[sampler_name]];\n    }\n\n    // Set the sampler uniform value.\n    var sampler_handle = c.gl.getUniformLocation(program_handle, sampler_name);\n    program.texture_uniforms[sampler_name] = texture_id;\n\n    c._ns[program_id].textures[texture_id] = {\n        sampler_name: sampler_name,\n        sampler_handle: sampler_handle,\n        number: -1, // assigned later\n        handle: texture_handle,\n    };\n};\n\nglir.prototype.interpolation = function(c, args) {\n    var texture_id = args[0];\n    var min = args[1].toUpperCase();\n    var mag = args[2].toUpperCase();\n    var texture_handle = c._ns[texture_id].handle;\n\n    var gl_type = c.gl.TEXTURE_2D;\n    c.gl.bindTexture(gl_type, texture_handle);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_MIN_FILTER, c.gl[min]);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_MAG_FILTER, c.gl[mag]);\n    c.gl.bindTexture(gl_type, null);\n};\n\nglir.prototype.wrapping = function(c, args) {\n    var texture_id = args[0];\n    var wrapping = args[1];\n    var texture_handle = c._ns[texture_id].handle;\n\n    var gl_type = c.gl.TEXTURE_2D;\n    c.gl.bindTexture(gl_type, texture_handle);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_WRAP_S,\n                       c.gl[wrapping[0].toUpperCase()]);\n    c.gl.texParameteri(gl_type, c.gl.TEXTURE_WRAP_T,\n                       c.gl[wrapping[1].toUpperCase()]);\n    c.gl.bindTexture(gl_type, null);\n};\n\nglir.prototype.draw = function(c, args) {\n    var program_id = args[0];\n    var mode = args[1].toUpperCase();\n    var selection = args[2];\n\n    var program_handle = c._ns[program_id].handle;\n    var attributes = c._ns[program_id].attributes;\n    var textures = c._ns[program_id].textures;\n    var texture_number = 0;\n\n    // Activate the program.\n    c.gl.useProgram(program_handle);\n\n    // Activate all attributes in the program.\n    for (attribute_name in attributes) {\n        var attribute = attributes[attribute_name];\n        debug(\"Activating attribute '{0}' for program '{1}'.\".format(\n            attribute_name, program_id));\n        activate_attribute(c, attribute.handle, attribute.vbo_id,\n            attribute.type, attribute.stride, attribute.offset);\n    }\n\n    // Activate all textures in the program.\n    for (texture_id in textures) {\n        var texture = textures[texture_id];\n        if (c._ns[texture_id].handle === JUST_DELETED) {\n            debug(\"Ignoring texture '{0}' from program '{1}'\".format(\n                texture_id, program_id\n            ));\n            texture.handle = JUST_DELETED;\n            continue;\n        }\n        texture.number = texture_number;\n        texture_number += 1;\n        debug(\"Activating texture '{0}' for program '{1}' as number '{2}'.\".format(\n            texture_id, program_id, texture.number));\n        activate_texture(c, texture.handle, texture.sampler_handle, texture.number);\n        c.gl.uniform1i(texture.sampler_handle, texture.number);\n    }\n\n    // Draw the program.\n    if (selection.length == 2) {\n        // Draw the program without index buffer.\n        var start = selection[0];\n        var count = selection[1];\n        debug(\"Rendering program '{0}' with {1}.\".format(\n            program_id, mode));\n        c.gl.drawArrays(c.gl[mode], start, count);\n    }\n    else if (selection.length == 3) {\n        // Draw the program with index buffer.\n        var index_buffer_id = selection[0];\n        var index_buffer_type = selection[1];\n        var count = selection[2];\n        // Get the index buffer handle from the namespace.\n        var index_buffer_handle = c._ns[index_buffer_id].handle;\n        debug(\"Rendering program '{0}' with {1} and index buffer '{2}' of type '{3}'.\".format(\n            program_id, mode, index_buffer_id, index_buffer_type));\n        // Activate the index buffer.\n        c.gl.bindBuffer(c.gl.ELEMENT_ARRAY_BUFFER, index_buffer_handle);\n        c.gl.drawElements(c.gl[mode], count, c.gl[index_buffer_type], 0);\n    }\n\n    // Deactivate attributes.\n    for (attribute_name in attributes) {\n        debug(\"Deactivating attribute '{0}' for program '{1}'.\".format(\n            attribute_name, program_id));\n        deactivate_attribute(c, attributes[attribute_name].handle);\n    }\n\n    // Deactivate textures.\n    var new_textures = {};\n    for (texture_id in textures) {\n        var texture = textures[texture_id];\n        debug(\"Deactivating texture '{0}' for program '{1}'.\".format(\n            texture_id, program_id));\n        deactivate_texture(c, texture.handle, texture.sampler_handle, texture.number);\n\n        // Don't include any of the textures that were deleted in this program\n        if (c._ns[texture_id].handle != JUST_DELETED) {\n            new_textures[texture_id] = texture;\n        }\n    }\n    c._ns[program_id].textures = new_textures;\n};\n\nglir.prototype.attach = function(c, args) {\n    // framebuffer or shader object ID\n    var dst_id = args[0];\n    var dst_obj = c._ns[dst_id];\n    var dst_type = dst_obj.object_type;\n    var dst_handle = dst_obj.handle;\n    if (dst_type == 'Program') {\n        // attaching to program, must be a shader we're attaching\n        var shader_id = args[1];\n        var shader_handle = c._ns[shader_id].handle;\n        c.gl.attachShader(dst_handle, shader_handle);\n        return;\n    }\n\n    // Attach to framebuffer\n    var object_id = args[2];\n    var attach_type = c.gl[get_attachment_type(args[1])];\n    var object;\n    activate_framebuffer(c, dst_id);\n    if (object_id == 0) {\n        debug('Attaching RenderBuffer object {0} to framebuffer {1}'.format(object_id, dst_id));\n        c.gl.framebufferRenderbuffer(c.gl.FRAMEBUFFER, attach_type, c.gl.RENDERBUFFER, null);\n    } else {\n        object = c._ns[object_id];\n        debug('Attaching {0} object {1} to framebuffer {2} for {3}'.format(object.object_type, object_id, dst_id, args[1]));\n        if (object.object_type == 'RenderBuffer') {\n            c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, object.handle);\n            c.gl.framebufferRenderbuffer(c.gl.FRAMEBUFFER, attach_type, c.gl.RENDERBUFFER, object.handle);\n            c.gl.bindRenderbuffer(c.gl.RENDERBUFFER, null);\n        }\n        else if (object.object_type == 'Texture2D') {\n            // null or undefined\n            if (object.shape.length == 0) {\n                debug('Setting empty texture data to unset texture before attaching to framebuffer');\n                set_texture_data(c, object.handle, c.gl.TEXTURE_2D,\n                    c.gl[object.format], object.size[1], object.size[0], null);\n            }\n            // INFO: 0 is for mipmap level 0 (default) of the texture\n            c.gl.bindTexture(c.gl.TEXTURE_2D, object.handle);\n            c.gl.framebufferTexture2D(c.gl.FRAMEBUFFER, attach_type, c.gl.TEXTURE_2D, object.handle, 0);\n            c.gl.bindTexture(c.gl.TEXTURE_2D, null);\n        }\n    }\n    c._ns[dst_id].validated = false;\n    deactivate_framebuffer(c, dst_id);\n};\n\nglir.prototype.link = function(c, args) {\n    var program_handle = c._ns[args[0]].handle;\n    c.gl.linkProgram(program_handle);\n\n    if (!c.gl.getProgramParameter(program_handle, c.gl.LINK_STATUS))\n    {\n        console.warn(\"Could not initialise shaders on program '{0}'.\".format(program_handle));\n    }\n};\n\nglir.prototype.framebuffer = function(c, args) {\n    var framebuffer_id = args[0];\n    var bind = args[1];\n    var fb = c._ns[framebuffer_id];\n\n    if (bind) {\n        debug('Binding framebuffer {0}'.format(framebuffer_id));\n        activate_framebuffer(c, framebuffer_id);\n        if (!fb.validated) {\n            fb.validated = true;\n            validate_framebuffer(c);\n        }\n    }\n    else {\n        debug('Unbinding framebuffer {0}'.format(framebuffer_id));\n        deactivate_framebuffer(c, framebuffer_id);\n    }\n};\n\nglir.prototype.func = function(c, args) {\n    var name = args[0];\n    debug(\"Calling {0}({1}).\".format(name, args.slice(1)));\n\n    // Handle enums: replace strings by global GL variables.\n    for (var i = 1; i < args.length; i++) {\n        if (typeof args[i] === 'string') {\n            args[i] = parse_enum(c, args[i]);\n        }\n    }\n\n    var func = c.gl[name];\n    var func_args = args.slice(1);\n    func.apply(c.gl, func_args);\n};\n\nmodule.exports = new glir();\n\n},{\"./data.js\":1,\"./util.js\":7,\"./vispycanvas.js\":9}],4:[function(require,module,exports){\nvar glir = require('./gloo.glir.js');\n\nfunction init_webgl(c) {\n    // Get the DOM object, not the jQuery one.\n    var canvas = c.$el.get(0);\n    c.gl = canvas.getContext(\"webgl\") ||\n           canvas.getContext(\"experimental-webgl\");\n    var ext = c.gl.getExtension('OES_standard_derivatives') || c.gl.getExtension('MOZ_OES_standard_derivatives') || c.gl.getExtension('WEBKIT_OES_standard_derivatives');\n    if (ext === null) {\n        console.warn('Extension \\'OES_standard_derivatives\\' is not supported in this browser. Some features may not work as expected');\n    }\n    var ext = c.gl.getExtension('OES_element_index_uint') ||\n        c.gl.getExtension('MOZ_OES_element_index_uint') ||\n        c.gl.getExtension('WEBKIT_OES_element_index_uint');\n    if (ext === null) {\n        console.warn('Extension \\'OES_element_index_uint\\' is not supported in this browser. Some features may not work as expected');\n    }\n    var ext = c.gl.getExtension('OES_texture_float');\n    // ||\n    //     c.gl.getExtension('MOZ_OES_element_index_uint') ||\n    //     c.gl.getExtension('WEBKIT_OES_element_index_uint');\n    if (ext === null) {\n        console.warn('Extension \\'OES_texture_float\\' is not supported in this browser. Some features may not work as expected');\n    }\n\n    var ext = c.gl.getExtension('OES_texture_float_linear');\n    if (ext === null) {\n        console.warn('Extension \\'OES_texture_float_linear\\' is not supported in this browser. Some features may not work as expected');\n    }\n\n    // c.gl.getExtension('EXT_shader_texture_lod');\n}\n\n\n/* Creation of vispy.gloo */\nvar gloo = function() {\n    this.glir = glir;\n    // Constructor.\n\n};\n\ngloo.prototype.init = function(c) {\n    init_webgl(c);\n    this.glir.init(c);\n};\n\n\nmodule.exports = new gloo();\n\n},{\"./gloo.glir.js\":3}],5:[function(require,module,exports){\n/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)\n * Licensed under the MIT License (LICENSE.txt).\n *\n * Version: 3.1.12\n *\n * Requires: jQuery 1.2.2+\n */\n!function(a){\"function\"==typeof define&&define.amd?define([\"jquery\"],a):\"object\"==typeof exports?module.exports=a:a(jQuery)}(function(a){function b(b){var g=b||window.event,h=i.call(arguments,1),j=0,l=0,m=0,n=0,o=0,p=0;if(b=a.event.fix(g),b.type=\"mousewheel\",\"detail\"in g&&(m=-1*g.detail),\"wheelDelta\"in g&&(m=g.wheelDelta),\"wheelDeltaY\"in g&&(m=g.wheelDeltaY),\"wheelDeltaX\"in g&&(l=-1*g.wheelDeltaX),\"axis\"in g&&g.axis===g.HORIZONTAL_AXIS&&(l=-1*m,m=0),j=0===m?l:m,\"deltaY\"in g&&(m=-1*g.deltaY,j=m),\"deltaX\"in g&&(l=g.deltaX,0===m&&(j=-1*l)),0!==m||0!==l){if(1===g.deltaMode){var q=a.data(this,\"mousewheel-line-height\");j*=q,m*=q,l*=q}else if(2===g.deltaMode){var r=a.data(this,\"mousewheel-page-height\");j*=r,m*=r,l*=r}if(n=Math.max(Math.abs(m),Math.abs(l)),(!f||f>n)&&(f=n,d(g,n)&&(f/=40)),d(g,n)&&(j/=40,l/=40,m/=40),j=Math[j>=1?\"floor\":\"ceil\"](j/f),l=Math[l>=1?\"floor\":\"ceil\"](l/f),m=Math[m>=1?\"floor\":\"ceil\"](m/f),k.settings.normalizeOffset&&this.getBoundingClientRect){var s=this.getBoundingClientRect();o=b.clientX-s.left,p=b.clientY-s.top}return b.deltaX=l,b.deltaY=m,b.deltaFactor=f,b.offsetX=o,b.offsetY=p,b.deltaMode=0,h.unshift(b,j,l,m),e&&clearTimeout(e),e=setTimeout(c,200),(a.event.dispatch||a.event.handle).apply(this,h)}}function c(){f=null}function d(a,b){return k.settings.adjustOldDeltas&&\"mousewheel\"===a.type&&b%120===0}var e,f,g=[\"wheel\",\"mousewheel\",\"DOMMouseScroll\",\"MozMousePixelScroll\"],h=\"onwheel\"in document||document.documentMode>=9?[\"wheel\"]:[\"mousewheel\",\"DomMouseScroll\",\"MozMousePixelScroll\"],i=Array.prototype.slice;if(a.event.fixHooks)for(var j=g.length;j;)a.event.fixHooks[g[--j]]=a.event.mouseHooks;var k=a.event.special.mousewheel={version:\"3.1.12\",setup:function(){if(this.addEventListener)for(var c=h.length;c;)this.addEventListener(h[--c],b,!1);else this.onmousewheel=b;a.data(this,\"mousewheel-line-height\",k.getLineHeight(this)),a.data(this,\"mousewheel-page-height\",k.getPageHeight(this))},teardown:function(){if(this.removeEventListener)for(var c=h.length;c;)this.removeEventListener(h[--c],b,!1);else this.onmousewheel=null;a.removeData(this,\"mousewheel-line-height\"),a.removeData(this,\"mousewheel-page-height\")},getLineHeight:function(b){var c=a(b),d=c[\"offsetParent\"in a.fn?\"offsetParent\":\"parent\"]();return d.length||(d=a(\"body\")),parseInt(d.css(\"fontSize\"),10)||parseInt(c.css(\"fontSize\"),10)||16},getPageHeight:function(b){return a(b).height()},settings:{adjustOldDeltas:!0,normalizeOffset:!0}};a.fn.extend({mousewheel:function(a){return a?this.bind(\"mousewheel\",a):this.trigger(\"mousewheel\")},unmousewheel:function(a){return this.unbind(\"mousewheel\",a)}})});\n},{}],6:[function(require,module,exports){\n/*!\n* screenfull\n* v1.2.0 - 2014-04-29\n* (c) Sindre Sorhus; MIT License\n*/\n!function(){\"use strict\";var a=\"undefined\"!=typeof module&&module.exports,b=\"undefined\"!=typeof Element&&\"ALLOW_KEYBOARD_INPUT\"in Element,c=function(){for(var a,b,c=[[\"requestFullscreen\",\"exitFullscreen\",\"fullscreenElement\",\"fullscreenEnabled\",\"fullscreenchange\",\"fullscreenerror\"],[\"webkitRequestFullscreen\",\"webkitExitFullscreen\",\"webkitFullscreenElement\",\"webkitFullscreenEnabled\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"webkitRequestFullScreen\",\"webkitCancelFullScreen\",\"webkitCurrentFullScreenElement\",\"webkitCancelFullScreen\",\"webkitfullscreenchange\",\"webkitfullscreenerror\"],[\"mozRequestFullScreen\",\"mozCancelFullScreen\",\"mozFullScreenElement\",\"mozFullScreenEnabled\",\"mozfullscreenchange\",\"mozfullscreenerror\"],[\"msRequestFullscreen\",\"msExitFullscreen\",\"msFullscreenElement\",\"msFullscreenEnabled\",\"MSFullscreenChange\",\"MSFullscreenError\"]],d=0,e=c.length,f={};e>d;d++)if(a=c[d],a&&a[1]in document){for(d=0,b=a.length;b>d;d++)f[c[0][d]]=a[d];return f}return!1}(),d={request:function(a){var d=c.requestFullscreen;a=a||document.documentElement,/5\\.1[\\.\\d]* Safari/.test(navigator.userAgent)?a[d]():a[d](b&&Element.ALLOW_KEYBOARD_INPUT)},exit:function(){document[c.exitFullscreen]()},toggle:function(a){this.isFullscreen?this.exit():this.request(a)},onchange:function(){},onerror:function(){},raw:c};return c?(Object.defineProperties(d,{isFullscreen:{get:function(){return!!document[c.fullscreenElement]}},element:{enumerable:!0,get:function(){return document[c.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return!!document[c.fullscreenEnabled]}}}),document.addEventListener(c.fullscreenchange,function(a){d.onchange.call(d,a)}),document.addEventListener(c.fullscreenerror,function(a){d.onerror.call(d,a)}),void(a?module.exports=d:window.screenfull=d)):void(a?module.exports=!1:window.screenfull=!1)}();\n},{}],7:[function(require,module,exports){\nif (!String.prototype.format) {\n  String.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/{(\\d+)}/g, function(match, number) {\n      return (typeof args[number] != 'undefined')\n        ? args[number]\n        : match;\n    });\n  };\n}\n\nif(typeof(String.prototype.trim) === \"undefined\")\n{\n    String.prototype.trim = function()\n    {\n        return String(this).replace(/^\\s+|\\s+$/g, '');\n    };\n}\n\nfunction is_array(x) {\n    return (Object.prototype.toString.call(x) === '[object Array]');\n}\n\nArray.prototype.equals = function (array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l=this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!this[i].equals(array[i]))\n                return false;\n        }\n        else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\nif (typeof String.prototype.startsWith != 'function') {\n  String.prototype.startsWith = function (str){\n    return this.slice(0, str.length) == str;\n  };\n}\n\nwindow.VISPY_DEBUG = false;\nfunction debug(msg) {\n    if (window.VISPY_DEBUG){\n        console.debug(msg);\n    }\n}\n\nmodule.exports = {debug: debug};\n\n},{}],8:[function(require,module,exports){\nvar screenful = require(\"./lib/screenfull.min.js\");\nvar VispyCanvas = require('./vispycanvas.js');\nvar gloo = require('./gloo.js');\nvar events = require('./events.js');\nvar util = require('./util.js');\nvar data = require('./data.js');\nrequire(\"./lib/jquery.mousewheel.min.js\")($);\n\nvar Vispy = function() {\n    // Constructor of the Vispy library.\n    this.events = events;\n    this.gloo = gloo;\n    this._is_loop_running = false;\n    // List of canvases on the page.\n    this._canvases = [];\n};\n\nVispy.prototype.init = function(canvas_id) {\n    var canvas_el;\n    canvas_el = $(canvas_id);\n    // Initialize the canvas.\n    var canvas = new VispyCanvas(canvas_el);\n\n    canvas.deactivate_context_menu();\n\n    // Initialize events.\n    this.events.init(canvas);\n\n    // Initialize WebGL.\n    this.gloo.init(canvas);\n\n    // Register the canvas.\n    this.register(canvas);\n\n    return canvas;\n};\n\nVispy.prototype.register = function(canvas) {\n    /* Register a canvas. */\n    this._canvases.push(canvas);\n    // console.debug(\"Register canvas\", canvas);\n};\n\nVispy.prototype.unregister = function(canvas) {\n    /* Unregister a canvas. */\n    var index = this._canvases.indexOf(canvas);\n    if (index > -1) {\n        this._canvases.splice(index, 1);\n    }\n    // console.debug(\"Unregister canvas\", canvas);\n};\n\n\n/* Event loop */\nVispy.prototype.start_event_loop = function() {\n\n    // Do not start the event loop twice.\n    if (this._is_loop_running) return;\n\n    window.requestAnimFrame = (function(){\n          return  window.requestAnimationFrame       ||\n                  window.webkitRequestAnimationFrame ||\n                  window.mozRequestAnimationFrame    ||\n                  function(c){\n                    window.setTimeout(c, 1000. / 60.);\n                  };\n    })();\n\n    // \"that\" is the current Vispy instance.\n    var that = this;\n    (function animloop() {\n        that._request_id = requestAnimFrame(animloop);\n        try {\n            // Call event_tick() on all active canvases.\n            for (var i = 0; i < that._canvases.length; i++) {\n                that._canvases[i].event_tick();\n            }\n        }\n        catch(err) {\n            that.stop_event_loop();\n            throw (err);\n        }\n    })();\n\n    this._is_loop_running = true;\n    console.debug(\"Event loop started.\");\n};\n\nVispy.prototype.stop_event_loop = function() {\n    window.cancelAnimationFrame(this._request_id);\n    this._is_loop_running = false;\n    console.debug(\"Event loop stopped.\");\n};\n\n\nmodule.exports = new Vispy();\n\n},{\"./data.js\":1,\"./events.js\":2,\"./gloo.js\":4,\"./lib/jquery.mousewheel.min.js\":5,\"./lib/screenfull.min.js\":6,\"./util.js\":7,\"./vispycanvas.js\":9}],9:[function(require,module,exports){\n\nvar VispyCanvas = function ($el) {\n    this.$el = $el;\n};\n\nmodule.exports = VispyCanvas;\n\n},{}]},{},[8])(8)\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n","\"use strict\";\n\nvar widgets = require('@jupyter-widgets/base');\nvar vispy = require('./vispy.min.js');\n\nfunction _inline_glir_commands(commands, buffers) {\n    // Put back the buffers within the GLIR commands before passing them\n    // to the GLIR JavaScript interpretor.\n    for (var i = 0; i < commands.length; i++) {\n        var command = commands[i];\n        // Shader data commands are 3 elements, everything else 4\n        if (command[0] == 'DATA') {\n            console.info(command);\n            if (command[3].shape !== undefined) {\n                // already handled\n                console.info(\"Skipping message processing, already handled...\");\n                continue;\n            }\n            var buffer_index = command[3]['buffer_index'];\n            var buffer_shape = command[3]['buffer_shape'];\n            var buffer_dtype = command[3]['buffer_dtype'];\n            command[3] = buffers[buffer_index];\n            // Add shape and type information to buffer object\n            command[3].shape = buffer_shape;\n            command[3].dtype = buffer_dtype;\n        }\n    }\n    return commands;\n}\n\n// var vispy = require(\"/nbextensions/vispy/vispy.min.js\");\n// var widget, control;\n// try {\n//     widget = require(\"@jupyter-widgets/base\");\n//     control = require(\"@jupyter-widgets/controls\");\n// } catch (e) {\n//     console.warn(\"Importing old ipywidgets <7.0\");\n//     widget = require(\"jupyter-js-widgets\");\n// }\n\nvar VispyView = widgets.DOMWidgetView.extend({\n\n        initialize: function (parameters) {\n            VispyView.__super__.initialize.apply(this, [parameters]);\n\n            this.model.on('msg:custom', this.on_msg, this);\n\n            // Track canvas size changes.\n            this.model.on('change:width', this.size_changed, this);\n            this.model.on('change:height', this.size_changed, this);\n        },\n\n        render: function() {\n            var that = this;\n\n            var canvas = $('<canvas></canvas>');\n            // canvas.css('border', '1px solid rgb(171, 171, 171)');\n            canvas.css('background-color', '#000');\n            canvas.attr('tabindex', '1');\n            this.$el.append(canvas);\n            this.$canvas = canvas;\n\n            // Initialize the VispyCanvas.\n            this.c = vispy.init(canvas);\n\n            this.c.on_resize(function (e) {\n                that.model.set('width', e.size[0]);\n                that.model.set('height', e.size[1]);\n                that.touch();\n            });\n\n            // Start the event loop.\n            this.c.on_event_tick(function() {\n                // This callback function will be called at each JS tick,\n                // before the GLIR commands are flushed.\n\n                // Retrieve and flush the event queue.\n                var events = that.c.event_queue.get();\n\n                that.c.event_queue.clear();\n                // Send the events if the queue is not empty.\n                if (events.length > 0) {\n                    // Create the message.\n                    var msg = {\n                        msg_type: 'events',\n                        contents: events\n                    };\n                    // console.debug(events);\n                    // Send the message with the events to Python.\n                    that.send(msg);\n                }\n            });\n\n            vispy.start_event_loop();\n            var msg = { msg_type: 'init' };\n            this.send(msg);\n            // Make sure the size is correctly set up upon first display.\n            this.size_changed();\n            this.c.resize();\n            this.c.resizable();\n        },\n\n        on_msg: function(msg, buffers) {\n            if (msg == undefined) return;\n            // Receive and execute the GLIR commands.\n            if (msg.msg_type == 'glir_commands') {\n                var commands = msg.commands;\n                // Get the buffers messages.\n                if (msg.array_serialization == 'base64') {\n                    var buffers_msg = msg.buffers;\n                } else if (msg.array_serialization == 'binary') {\n                    // Need to put the raw binary buffers in JavaScript\n                    // objects for the inline commands.\n                    var buffers_msg = [];\n                    for (var i = 0; i < buffers.length; i++) {\n                        buffers_msg[i] = {\n                            'storage_type': 'binary',\n                            'buffer': buffers[i]\n                        };\n                    }\n                }\n\n                // Make the GLIR commands ready for the JavaScript parser\n                // by inlining the buffers.\n                console.log(\"on_msg: %s : %s\", msg.msg_type, msg.commands);\n                var commands_inlined = _inline_glir_commands(commands, buffers_msg);\n                for (var i = 0; i < commands_inlined.length; i++) {\n                    var command = commands[i];\n                    console.debug(command);\n                    this.c.command(command);\n                }\n            }\n        },\n\n        // When the model's size changes.\n        size_changed: function() {\n            var size = [this.model.get('width'), this.model.get('height')];\n            this.$canvas.css('width', size[0] + 'px');\n            this.$canvas.css('height', size[1] + 'px');\n        },\n\n        remove: function() {\n            vispy.unregister(this.c);\n            // Inform Python that the widget has been removed.\n            this.send({\n                msg_type: 'status',\n                contents: 'removed'\n            });\n        }\n    });\n\n\nmodule.exports = {\n    VispyView: VispyView\n};","module.exports = __WEBPACK_EXTERNAL_MODULE__jupyter_widgets_base__;"],"sourceRoot":""}